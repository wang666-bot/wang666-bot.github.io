<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法与数据结构学习（6）</title>
      <link href="/wang666-bot.github.io/post/a8243fc4.html"/>
      <url>/wang666-bot.github.io/post/a8243fc4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h1><p>1.汉诺塔问题</p><p>思路1：最左到最右边leftToRight 先leftToMid(n-1)，移动n，再midToRight(n-1)</p><p>leftToMid(n)  leftToRight(n-1) 移动n，rightToMid(n-1)</p><p>从而选择出6个过程，相互嵌套</p><p>思路2：分为from to other代替左中右 （递归版本）</p><p>结论：递归函数可以增加参数 从而可以代替多种小函数</p><p>2.打印一个字符的全部子序列</p><p>每个位置的数，选择要或不要，所有可能性形成的子序列的集合</p><p>3.打印全排列</p><p>分为rest，path，cur三个参数</p><p>每个位置都可以选择做cur，递归下去</p><p>优化：每个数都可以和0位置交换，使用交换代替选择，每次交换递归完都需要恢复现场</p><p>4.去重</p><p>加一个visited[]数组，加表</p><p>5.逆序一个栈（不申请额外空间）</p><p>思路：栈底元素移除掉，上面的元素盖下来</p><h1 id="暴力递归转动态规划（1）"><a href="#暴力递归转动态规划（1）" class="headerlink" title="暴力递归转动态规划（1）"></a>暴力递归转动态规划（1）</h1><p>1.斐波那契数列</p><p>f(n) &#x3D; f(n-1) + f(n - 2) 递归</p><p>思路：加缓存</p><p>2.机器人walk问题</p><p>暴力递归方法：process（cur，rest，aim，N），当前位置cur，还剩rest步，目标aim，位置1~N </p><p>Base case ： rest &#x3D;&#x3D; 0 时候返回当前位置是否在aim位置 1 ： 0</p><p>1位置和N位置特别讨论，其余位置可以向左或向右</p><p>优化：加缓存，记忆化搜索（出现重复解的暴力递归可以优化）</p><p>在process中添加一个二维数组int[]] [] dp &#x3D; new int[N + 1] [K + 1]</p><p>优化2.0：动态规划</p><p>建一个二维数组，慢慢填表，找出依赖关系</p><p><strong>范围尝试模型[L …. R]</strong></p><p>3.纸牌问题（先手后手）</p><p>暴力递归方法：arr[L…R]</p><p>先手:f(arr，L，R) 返回最佳的分数 max{arr[L] + g(arr, L + 1,R) arr[R] + g(arr,L, R - 1)}</p><p>后手：g(arr，L，R), min(f(arr,L + 1, R), f(arr, L, R - 1)}</p><p>记忆化搜索：先手后手相互依赖，两张表</p><p>int[] [] fmap  &#x3D; new int[N] [N]</p><p>int[] [] gmap  &#x3D; new int[N] [N]</p><p>动态规划：建两张表，找出依赖关系</p><p>递归行为替换成表值</p><h1 id="暴力递归转动态规划（2）"><a href="#暴力递归转动态规划（2）" class="headerlink" title="暴力递归转动态规划（2）"></a>暴力递归转动态规划（2）</h1><p>1.背包问题（在不超过背包大小的情况下价值最大）</p><p>W数组重量</p><p>V数组价值数组</p><p>bag表示背包大小</p><p><strong>从左往右的尝试模型</strong>：从左往右每个值选择要或不要</p><p>尝试方法：当前考虑index号货物，index…所有的货物可以自由选择，则u哦的选择不能超过背包容量，返回最大价值</p><p>process(w,v,index,bag)</p><p>2.返回一个数字串转换成字符串的多少种转换结果</p><p>3.给定一个字符串str，给定一个字符串类型的数组arr，出现的字符都是小写英文</p><p>arr每一个字符串，代表一张贴纸，你可以把单个字符剪开使用，目的是拼出str来</p><p>返回需要至少多少张贴纸可以完成这个任务。</p><p>例子：str&#x3D; “babac”，arr &#x3D; {“ba”,”c”,”abcd”}</p><p>ba + ba + c 3 abcd + abcd 2 abcd+ba 2</p><p>所以返回2</p><p>尝试方法：每一个贴纸作为第一张，看后续情况</p><p>优化点：词频统计</p><p>选择必须含有第一个字符的贴纸进行尝试（剪枝）</p><p>做到记忆化搜索即可HashMap</p><p>4.<strong>样本对应模型</strong>（以结尾考虑可能性）</p><p>字符串的最长公共子序列</p><p>str1[0….i] 和str2[0…j]的最长公共子序列</p><h1 id="暴力递归转动态规划（3）"><a href="#暴力递归转动态规划（3）" class="headerlink" title="暴力递归转动态规划（3）"></a>暴力递归转动态规划（3）</h1><p>1.给定一个字符串，返回这个字符串的最长回文子序列长度（不连续）</p><p>思路1：反转字符串，求最长公共子序列</p><p>思路2：范围尝试模型，4种可能性，范围尝试模型要讨论开头和结尾边界情况！</p><p>改成动态规划int[][] [] [] dp &#x3D; new int[N] [N]</p><p>L…..R,L &lt;&#x3D; R</p><p>2.象棋问题，马走日，从（0,0）出发，K步后正好到（x，y）位置的方法数</p><p>马走日：8种0</p><p>三维数组</p><p>小技巧：数组越界时返回0，不越界范围值，pick方法</p><p>3.泡咖啡问题（难！！！！）</p><p>四维数组</p><p>思路：建一个小根堆（什么时间，还要多久）进行排序（时间+多久）</p><h1 id="暴力递归转动态规划（4）"><a href="#暴力递归转动态规划（4）" class="headerlink" title="暴力递归转动态规划（4）"></a>暴力递归转动态规划（4）</h1><h1 id="暴力递归转动态规划（5）"><a href="#暴力递归转动态规划（5）" class="headerlink" title="暴力递归转动态规划（5）"></a>暴力递归转动态规划（5）</h1><h1 id="暴力递归转动态规划（6）"><a href="#暴力递归转动态规划（6）" class="headerlink" title="暴力递归转动态规划（6）"></a>暴力递归转动态规划（6）</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构学习（4）</title>
      <link href="/wang666-bot.github.io/post/22df74f.html"/>
      <url>/wang666-bot.github.io/post/22df74f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>先序遍历：头左右</p><p>中序遍历：左头右</p><p>后序遍历：左右头</p><p>递归序：每个节点都会三次回到自己  从而  加工出先中后序</p><p>题目：</p><p>1.X祖先节点交集</p><p>2.非递归实现先&#x2F;中&#x2F;后序遍历：</p><p>1）先序：栈顶出来记作cur，有右压入右，有左压入左，先右后左</p><p>2）后序：先序中把先右边后左改为先左再右边，再将弹出节点操作修改为加入栈2</p><p>3）中序：当前节点cur的数整条左边界进栈，直到空，从栈中弹出节点打印，节点的右孩子为cur1，栈为空停</p><p>按层遍历（宽度优先遍历）</p><p>1）队列出一个cur，打印</p><p>2）cur有左入左，有右入右</p><p>二叉树的序列化和反序列化</p><p>1）先序&#x2F;后序序列化</p><h3 id="注：中序方式无法序列化"><a href="#注：中序方式无法序列化" class="headerlink" title="注：中序方式无法序列化"></a>注：中序方式无法序列化</h3><p>2）按层方式序列化</p><p>按层方式遍历</p><p>题目：多叉树转为二叉树 leetcode 431</p><p>思路：多叉树的孩子一律放在左树右边界</p><p>题目：求二叉树最宽层有多少节点</p><p>思路：按层遍历，准备两个变量curend， nextend</p><p>题目：给定二叉数（有左右父节点）的节点，返回后继节点</p><p>思路1：中序遍历的下一个节点 O(n)</p><p>思路2：情况1：节点x有右树，x树的最左孩子</p><p>​情况2：节点x无右树，往父亲节点，如果父亲节点是右树，继续往上，直到是某个父亲节点的左孩子，此时该父亲节点是后继节点</p><p>题目：折纸问题</p><p>思路：二叉树，头凹，左头凹，右头凸</p><p>中序打印想象的节点为头的整棵树</p><p> 题目：判断是否是完全二叉树</p><p>思路：完全二叉树：满或者在变满的二叉树</p><p>思路：二叉树的按层遍历，遵循以下原则：1）某节点有右无左，false，</p><p>​2）第一次遇到孩子不双全的节点，之后的节点都是叶子节点</p><h2 id="二叉树的递归套路"><a href="#二叉树的递归套路" class="headerlink" title="二叉树的递归套路"></a>二叉树的递归套路</h2><p>题目：判断平衡二叉树(每个节点的左右子树高度相差不超过1)</p><p>思路： x左子数平衡</p><p>​x右子树平衡</p><p>​x左高-右高的差值不超过1</p><p>抽象出信息：高度，是否平衡</p><p>题目：是否是搜索二叉树</p><p>思路：x左搜，右搜，x左的最大值，x右的最小值</p><p>信息：最大值，最小值，是否是搜索二叉树  </p><p>题目：给定一棵二叉树的头节点head，任何两个节点之间都存在距离，返回整颗二叉树的最大距离</p><p>思路：可能性1：和head无关，左的最大距离， 右树的最大距离</p><p>​  可能性2：和head有关，x左边最远的点，右边最远的点，相加 + 1，</p><p>​在以上求max</p><p>抽象出信息：最大距离，最大高度</p><p>题目：是否是满二叉树</p><p>思路：满二叉树节点和高度之间的关系</p><p>抽象出信息：高度，节点数</p><p>题目：求二叉树上最大的搜索二叉树的节点数目</p><p>思路：1）不以x左头，x左的&#x2F;x右的</p><p>​2）X左是不是比BST，X右是不是BST，X左max X右min 左size + 右Size + 1</p><p>是不是BST，size &#x3D;&#x3D; 总节点数</p><p>信息：最大搜索二叉树的节点数，size，最大值，最小值</p><h3 id="二叉树的递归套路-1"><a href="#二叉树的递归套路-1" class="headerlink" title="二叉树的递归套路"></a>二叉树的递归套路</h3><p>1）假设以X节点为头，假设可以向X左树和X右树要任何信息</p><p>2）在上一步的假设下，讨论以X为头节点的树，得到答案的可能性（最重要）</p><p>3）列出所有可能性后，确定到底需要向左树和右树要什么样的信息</p><p>4）把左树信息和右树信息求全集，就是任何一棵子树都需要返回的信息S</p><p>5）递归函数都返回S，每一棵子树都这么要求</p><p>6）写代码，在代码中考虑如何把左树的信息和右树信息整合出整棵树的信息</p><p>题目：判断二叉树是否是完全二叉树</p><p>左满，右满，高度一致</p><p>左满，右满，且左高度比右高度大1</p><p>左完全，右满，且左高度比右高度大1</p><p>左满，右完全，高度一致</p><p>信息：满不满，是不是完全二叉树，高度</p><p>题目：给定头节点head，返回这棵二叉树最大的二叉搜索子数的头节点</p><p>题目：返回节点a和b的最低公共祖先</p><p>可能性1：汇聚点和x有关：左有答案，右有答案，a b不全</p><p>可能性2：汇聚点和x无关，a，b一个在左一个在右， x本身就是a或者b</p><p>信息：findA， findB， ans</p><p>题目：最大快乐值</p><p>可能性1：x来，0 + max（子节点来，不来）</p><p>可能性2：x不来，x的值+其子节点不来的max</p><p>信息：来，不来的最大快乐值</p><p>二叉树的递归套路在于讨论可能性</p><h3 id="二叉树的递归遍历（leetcode-144，-145，-94）"><a href="#二叉树的递归遍历（leetcode-144，-145，-94）" class="headerlink" title="二叉树的递归遍历（leetcode 144， 145， 94）"></a>二叉树的递归遍历（leetcode 144， 145， 94）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode head)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print(head.val)  先序</span></span><br><span class="line">    traversal(head.left);</span><br><span class="line">    <span class="comment">//print(head.val) 中序</span></span><br><span class="line">    traversal(head.right);</span><br><span class="line">    <span class="comment">//print(head.val) 后序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2D游戏开发（2）</title>
      <link href="/wang666-bot.github.io/post/a08d4f59.html"/>
      <url>/wang666-bot.github.io/post/a08d4f59.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="11-使用UI-Toolkit-和-UIBuilder制作物品编辑器"><a href="#11-使用UI-Toolkit-和-UIBuilder制作物品编辑器" class="headerlink" title="11.使用UI Toolkit 和 UIBuilder制作物品编辑器"></a>11.使用UI Toolkit 和 UIBuilder制作物品编辑器</h2><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710155649772.png" alt="image-20230710155649772"></p><p>文件夹下三个文件分别对应c# USS 和 Visual Tree Assert</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710160931443.png" alt="image-20230710160931443"></p><p>UI Builder</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710160837229.png" alt="image-20230710160837229"></p><p>在UI Builder中设置（类似于前端  flex设置grow为1， VisualBasic做Container）</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710163023556.png" alt="image-20230710163023556"></p><p>初步设计完成</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710172503940.png"></p><h2 id="12-创建ListView中的ItemTemplate"><a href="#12-创建ListView中的ItemTemplate" class="headerlink" title="12.创建ListView中的ItemTemplate"></a>12.创建ListView中的ItemTemplate</h2><p>在UI Builder文件夹中创建UI 文档</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710202527373.png" alt="image-20230710202527373"></p><h2 id="13-生成ListView列表"><a href="#13-生成ListView列表" class="headerlink" title="13.生成ListView列表"></a>13.生成ListView列表</h2><p>拿到数据的ID</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UIElements;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.UIElements;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemEditor</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ItemDataList_SO dataBase;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ItemDetails&gt; itemList = <span class="keyword">new</span> List&lt;ItemDetails&gt;();</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;W STUDIO/ItemEditor&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowExample</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ItemEditor wnd = GetWindow&lt;ItemEditor&gt;();</span><br><span class="line">        wnd.titleContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;ItemEditor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Each editor window contains a root VisualElement object</span></span><br><span class="line">        VisualElement root = rootVisualElement;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VisualElements objects can contain other VisualElement following a tree hierarchy.</span></span><br><span class="line">        <span class="comment">//VisualElement label = new Label(&quot;Hello World! From C#&quot;);</span></span><br><span class="line">        <span class="comment">//root.Add(label);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Import UXML</span></span><br><span class="line">        <span class="keyword">var</span> visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(<span class="string">&quot;Assets/Editor/UI Builder/ItemEditor.uxml&quot;</span>);</span><br><span class="line">        VisualElement labelFromUXML = visualTree.Instantiate();</span><br><span class="line">        root.Add(labelFromUXML);</span><br><span class="line"></span><br><span class="line">        LoadDataBase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadDataBase</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataArray = AssetDatabase.FindAssets(<span class="string">&quot;ItemDataList_SO&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dataArray.Length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> path = AssetDatabase.GUIDToAssetPath(dataArray[<span class="number">0</span>]);</span><br><span class="line">            dataBase = AssetDatabase.LoadAssetAtPath(path, <span class="keyword">typeof</span>(ItemDataList_SO)) <span class="keyword">as</span> ItemDataList_SO;</span><br><span class="line">        &#125;</span><br><span class="line">        itemList = dataBase.itemDetails;</span><br><span class="line">        <span class="comment">//如果不标注则无法保存数据</span></span><br><span class="line">        EditorUtility.SetDirty(dataBase);</span><br><span class="line">        Debug.Log(itemList[<span class="number">0</span>].itemID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710204307450.png" alt="image-20230710204307450"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UIElements;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.UIElements;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemEditor</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ItemDataList_SO dataBase;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ItemDetails&gt; itemList = <span class="keyword">new</span> List&lt;ItemDetails&gt;();</span><br><span class="line">    <span class="keyword">private</span> VisualTreeAsset itemRowTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得VisualElement</span></span><br><span class="line">    <span class="keyword">private</span> ListView itemListView;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;W STUDIO/ItemEditor&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowExample</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ItemEditor wnd = GetWindow&lt;ItemEditor&gt;();</span><br><span class="line">        wnd.titleContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;ItemEditor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Each editor window contains a root VisualElement object</span></span><br><span class="line">        VisualElement root = rootVisualElement;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VisualElements objects can contain other VisualElement following a tree hierarchy.</span></span><br><span class="line">        <span class="comment">//VisualElement label = new Label(&quot;Hello World! From C#&quot;);</span></span><br><span class="line">        <span class="comment">//root.Add(label);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Import UXML</span></span><br><span class="line">        <span class="keyword">var</span> visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(<span class="string">&quot;Assets/Editor/UI Builder/ItemEditor.uxml&quot;</span>);</span><br><span class="line">        VisualElement labelFromUXML = visualTree.Instantiate();</span><br><span class="line">        root.Add(labelFromUXML);</span><br><span class="line">        <span class="comment">//拿到模板数据</span></span><br><span class="line">        itemRowTemplate = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(<span class="string">&quot;Assets/Editor/UI Builder/ItemRowTemplate.uxml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//变量赋值</span></span><br><span class="line">        itemListView = root.Q&lt;VisualElement&gt;(<span class="string">&quot;ItemList&quot;</span>).Q&lt;ListView&gt;(<span class="string">&quot;ListView&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载数据</span></span><br><span class="line">        LoadDataBase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成ListView</span></span><br><span class="line">        GenerateListView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadDataBase</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataArray = AssetDatabase.FindAssets(<span class="string">&quot;ItemDataList_SO&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dataArray.Length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> path = AssetDatabase.GUIDToAssetPath(dataArray[<span class="number">0</span>]);</span><br><span class="line">            dataBase = AssetDatabase.LoadAssetAtPath(path, <span class="keyword">typeof</span>(ItemDataList_SO)) <span class="keyword">as</span> ItemDataList_SO;</span><br><span class="line">        &#125;</span><br><span class="line">        itemList = dataBase.itemDetails;</span><br><span class="line">        <span class="comment">//如果不标注则无法保存数据</span></span><br><span class="line">        EditorUtility.SetDirty(dataBase);</span><br><span class="line">        <span class="comment">//Debug.Log(itemList[0].itemID);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GenerateListView</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Func&lt;VisualElement&gt; makeItem = () =&gt; itemRowTemplate.CloneTree();</span><br><span class="line">        Action&lt;VisualElement, <span class="built_in">int</span>&gt; bindItem = (e, i) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; itemList.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(itemList[i].itemIcon != <span class="literal">null</span>)</span><br><span class="line">                    e.Q&lt;VisualElement&gt;(<span class="string">&quot;Icon&quot;</span>).style.backgroundImage = itemList[i].itemIcon.texture;</span><br><span class="line">                e.Q&lt;Label&gt;(<span class="string">&quot;Name&quot;</span>).text = itemList[i] == <span class="literal">null</span> ? <span class="string">&quot;NO ITEM&quot;</span> : itemList[i].itemName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        itemListView.fixedItemHeight = <span class="number">60</span>;</span><br><span class="line">        itemListView.itemsSource = itemList;</span><br><span class="line">        itemListView.makeItem = makeItem;</span><br><span class="line">        itemListView.bindItem = bindItem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710210835803.png" alt="image-20230710210835803"></p><h2 id="14-绑定Editor-Window中的参数变量"><a href="#14-绑定Editor-Window中的参数变量" class="headerlink" title="14.绑定Editor Window中的参数变量"></a>14.绑定Editor Window中的参数变量</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UIElements;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.UIElements;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemEditor</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ItemDataList_SO dataBase;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ItemDetails&gt; itemList = <span class="keyword">new</span> List&lt;ItemDetails&gt;();</span><br><span class="line">    <span class="keyword">private</span> VisualTreeAsset itemRowTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScrollView itemDetailSection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ItemDetails activeItem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认预览图片</span></span><br><span class="line">    <span class="keyword">private</span> Sprite defaultIcon;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VisualElement iconPreview;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得VisualElement</span></span><br><span class="line">    <span class="keyword">private</span> ListView itemListView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;W STUDIO/ItemEditor&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowExample</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ItemEditor wnd = GetWindow&lt;ItemEditor&gt;();</span><br><span class="line">        wnd.titleContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;ItemEditor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Each editor window contains a root VisualElement object</span></span><br><span class="line">        VisualElement root = rootVisualElement;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VisualElements objects can contain other VisualElement following a tree hierarchy.</span></span><br><span class="line">        <span class="comment">//VisualElement label = new Label(&quot;Hello World! From C#&quot;);</span></span><br><span class="line">        <span class="comment">//root.Add(label);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Import UXML</span></span><br><span class="line">        <span class="keyword">var</span> visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(<span class="string">&quot;Assets/Editor/UI Builder/ItemEditor.uxml&quot;</span>);</span><br><span class="line">        VisualElement labelFromUXML = visualTree.Instantiate();</span><br><span class="line">        root.Add(labelFromUXML);</span><br><span class="line">        <span class="comment">//拿到模板数据</span></span><br><span class="line">        itemRowTemplate = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(<span class="string">&quot;Assets/Editor/UI Builder/ItemRowTemplate.uxml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到默认Icon图片</span></span><br><span class="line">        defaultIcon = AssetDatabase.LoadAssetAtPath&lt;Sprite&gt;(<span class="string">&quot;Assets/M Studio/Art/Items/Icons/icon_M.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//变量赋值</span></span><br><span class="line">        itemListView = root.Q&lt;VisualElement&gt;(<span class="string">&quot;ItemList&quot;</span>).Q&lt;ListView&gt;(<span class="string">&quot;ListView&quot;</span>);</span><br><span class="line">        itemDetailSection = root.Q&lt;ScrollView&gt;(<span class="string">&quot;ItemDetails&quot;</span>);</span><br><span class="line">        iconPreview = itemDetailSection.Q&lt;VisualElement&gt;(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载数据</span></span><br><span class="line">        LoadDataBase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成ListView</span></span><br><span class="line">        GenerateListView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadDataBase</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataArray = AssetDatabase.FindAssets(<span class="string">&quot;ItemDataList_SO&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dataArray.Length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> path = AssetDatabase.GUIDToAssetPath(dataArray[<span class="number">0</span>]);</span><br><span class="line">            dataBase = AssetDatabase.LoadAssetAtPath(path, <span class="keyword">typeof</span>(ItemDataList_SO)) <span class="keyword">as</span> ItemDataList_SO;</span><br><span class="line">        &#125;</span><br><span class="line">        itemList = dataBase.itemDetails;</span><br><span class="line">        <span class="comment">//如果不标注则无法保存数据</span></span><br><span class="line">        EditorUtility.SetDirty(dataBase);</span><br><span class="line">        <span class="comment">//Debug.Log(itemList[0].itemID);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GenerateListView</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Func&lt;VisualElement&gt; makeItem = () =&gt; itemRowTemplate.CloneTree();</span><br><span class="line">        Action&lt;VisualElement, <span class="built_in">int</span>&gt; bindItem = (e, i) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; itemList.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(itemList[i].itemIcon != <span class="literal">null</span>)</span><br><span class="line">                    e.Q&lt;VisualElement&gt;(<span class="string">&quot;Icon&quot;</span>).style.backgroundImage = itemList[i].itemIcon.texture;</span><br><span class="line">                e.Q&lt;Label&gt;(<span class="string">&quot;Name&quot;</span>).text = itemList[i] == <span class="literal">null</span> ? <span class="string">&quot;NO ITEM&quot;</span> : itemList[i].itemName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        itemListView.fixedItemHeight = <span class="number">60</span>;</span><br><span class="line">        itemListView.itemsSource = itemList;</span><br><span class="line">        itemListView.makeItem = makeItem;</span><br><span class="line">        itemListView.bindItem = bindItem;</span><br><span class="line"></span><br><span class="line">        itemListView.onSelectionChange += OnListSelectionChange;</span><br><span class="line"></span><br><span class="line">        itemDetailSection.visible = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnListSelectionChange</span>(<span class="params">IEnumerable&lt;<span class="built_in">object</span>&gt; selectedItem</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        activeItem = (ItemDetails)selectedItem.First();</span><br><span class="line">        GetItemDetails();</span><br><span class="line">        itemDetailSection.visible = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetItemDetails</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        itemDetailSection.MarkDirtyRepaint();</span><br><span class="line">        itemDetailSection.Q&lt;IntegerField&gt;(<span class="string">&quot;ItemID&quot;</span>).<span class="keyword">value</span> = activeItem.itemID;</span><br><span class="line">        itemDetailSection.Q&lt;IntegerField&gt;(<span class="string">&quot;ItemID&quot;</span>).RegisterValueChangedCallback(evt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            activeItem.itemID = evt.newValue;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        itemDetailSection.Q&lt;TextField&gt;(<span class="string">&quot;ItemName&quot;</span>).<span class="keyword">value</span> = activeItem.itemName;</span><br><span class="line">        itemDetailSection.Q&lt;TextField&gt;(<span class="string">&quot;ItemName&quot;</span>).RegisterValueChangedCallback(evt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            activeItem.itemName = evt.newValue;</span><br><span class="line">            itemListView.Rebuild();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        iconPreview.style.backgroundImage = activeItem.itemIcon == <span class="literal">null</span> ? defaultIcon.texture : activeItem.itemIcon.texture;</span><br><span class="line">        itemDetailSection.Q&lt;ObjectField&gt;(<span class="string">&quot;ItemIcon&quot;</span>).<span class="keyword">value</span> = activeItem.itemIcon;</span><br><span class="line">        itemDetailSection.Q&lt;ObjectField&gt;(<span class="string">&quot;ItemIcon&quot;</span>).RegisterValueChangedCallback(evt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Sprite newIcon = evt.newValue <span class="keyword">as</span> Sprite;</span><br><span class="line">            activeItem.itemIcon = newIcon;</span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line">           iconPreview.style.backgroundImage = newIcon == <span class="literal">null</span> ? defaultIcon.texture : newIcon.texture;</span><br><span class="line">            </span><br><span class="line">            itemListView.Rebuild();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/a08d4f59.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/image-20230710212637616.png" alt="image-20230710212637616"></p><h2 id="15-实现ListView添加删除同步信息功能"><a href="#15-实现ListView添加删除同步信息功能" class="headerlink" title="15.实现ListView添加删除同步信息功能"></a>15.实现ListView添加删除同步信息功能</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 按键事件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDeleteClicked</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        itemList.Remove(activeItem);</span><br><span class="line">        itemListView.Rebuild();</span><br><span class="line">        itemDetailSection.visible = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnAddItemClicked</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ItemDetails newItem = <span class="keyword">new</span> ItemDetails();</span><br><span class="line">        newItem.itemName = <span class="string">&quot;NEW ITEM&quot;</span>;</span><br><span class="line">        newItem.itemID = <span class="number">1000</span> + itemList.Count;</span><br><span class="line">        itemList.Add(newItem);</span><br><span class="line">        itemListView.Rebuild();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2D游戏开发（1）</title>
      <link href="/wang666-bot.github.io/post/b238e0b7.html"/>
      <url>/wang666-bot.github.io/post/b238e0b7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>选择Unity版本2021.3.20</p><p>熟悉面板布局</p><p>在Package Manager进行一些瘦身</p><h2 id="2-素材和工具"><a href="#2-素材和工具" class="headerlink" title="2.素材和工具"></a>2.素材和工具</h2><p>首先导入素材</p><p>Animations中的Basic Empty Clips存放的都是空的动画</p><p>Art中存放的是图片素材，其中名称有@20的是可以切割成20的，没有的就选择自适应切割</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%88%87%E5%89%B2%E7%B4%A0%E6%9D%90%E8%AE%BE%E7%BD%AE.png" alt="image-20230709201224341"></p><p>并将此设置保存为预设，直接应用到所有的Map上</p><p>然后逐一进行切割：点击Sprite Editor——切片——按尺寸切片——20*20 &#x2F; 聪明</p><p>对人物的模块进行切割：因为是8帧，所有按count进行切割，锚点选择bottom</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%E5%88%87%E5%89%B2.png" alt="image-20230709202634140"></p><h2 id="3-创建Player"><a href="#3-创建Player" class="headerlink" title="3.创建Player"></a>3.创建Player</h2><p>首先创造一个空的物体命名为Player，人物是由各个部分组成的，所有各个部分为子物体，</p><p>渲染是按顺序渲染的，在下方的物体会遮住上面的</p><p>给body物体添加Sprite Renderer组件，将Body——WalkDown的第一张图片拖拽进组件</p><p>按照Shadow（顺序设置为-1） Body  Hair Arm的顺序排序</p><p>​</p><p>设置一个Instance图层，在Player父物体上添加一个Sorting Group组件，让所有的父物体子物体都在同一个图层上</p><p>由于是2D横板游戏，需要修改渲染轴（Unity默认是按Z轴进行渲染）</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%9B%BE%E5%BD%A2%E8%AE%BE%E7%BD%AE.png" alt="image-20230709204855759"></p><h2 id="4-人物移动"><a href="#4-人物移动" class="headerlink" title="4.人物移动"></a>4.人物移动</h2><p>给Player设置碰撞体</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709205510129.png" alt="image-20230709205510129"></p><p>编写脚本</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取碰撞体</span></span><br><span class="line">    <span class="keyword">private</span> Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speed;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> inputX;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> inputY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector2 movementInput;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        PlayerInput();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Movement();   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PlayerInput</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputX = Input.GetAxisRaw(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        inputY = Input.GetAxisRaw(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        <span class="comment">//限制斜方向的速度</span></span><br><span class="line">        <span class="keyword">if</span> (inputX != <span class="number">0</span> &amp;&amp; inputY != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            inputX = inputX * <span class="number">0.6f</span>;</span><br><span class="line">            inputY = inputY * <span class="number">0.6f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        movementInput = <span class="keyword">new</span> Vector2(inputX, inputY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Movement</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb.MovePosition(rb.position + movementInput * speed * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-地图"><a href="#5-地图" class="headerlink" title="5.地图"></a>5.地图</h2><p>创建瓦片地图，按照如下的顺序进行创建</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709212242843.png" alt="image-20230709212242843"></p><p>并创建对应的图层顺序</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709212513682.png" alt="image-20230709212513682"></p><p>添加一些地图属性，设置图层为Collision，默认关闭</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709212856169.png" alt="image-20230709212856169"></p><p>将地图保存到另一个场景中，使用调色盘进行地图的绘制</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709232601903.png" alt="image-20230709232601903"></p><p>随机笔刷的使用&#x2F;规则瓦片地图的使用</p><h2 id="6-摄像机跟随"><a href="#6-摄像机跟随" class="headerlink" title="6.摄像机跟随"></a>6.摄像机跟随</h2><p>地图中存在一些瓦片之间的缝隙（图片切割 不在同一张图片上）</p><p>使用图集Sprite Altas，把所有的图片都打包成一张照片，如果在运行时，图片之间有一些额外的图片可能是因为图片离的比较近，修改填充，变大即可，避免图片之间的干扰</p><p>安装Cinemachine包，设置2DCamera，主相机安装Pixel Predect Camera组件</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709233937329.png" alt="image-20230709233937329"></p><p>CM vcam也安装，并设置Zone大小</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709234316685.png" alt="image-20230709234316685"></p><h2 id="7-碰撞层和景观树"><a href="#7-碰撞层和景观树" class="headerlink" title="7.碰撞层和景观树"></a>7.碰撞层和景观树</h2><p>首先设置Collision 的调色板，接在给Collision的瓦片地图加上组件</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230709235806713.png" alt="image-20230709235806713"></p><p>修改碰撞体锯齿</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710000453512.png" alt="image-20230710000453512"></p><p>添加树的动画</p><p>添加Animator组件，在动画里创建添加事务</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710002245631.png" alt="image-20230710002245631"></p><p>复制的粉色树需要修改自己的动画，并在动画器中进行设置</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710002716185.png" alt="image-20230710002716185"></p><h2 id="8-设置摄像机边界"><a href="#8-设置摄像机边界" class="headerlink" title="8.设置摄像机边界"></a>8.设置摄像机边界</h2><p>设置一个Bounds</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710003621785.png" alt="image-20230710003621785"></p><p>给CM添加一个限制器组件，Confiner组件，编写脚本，使得切换场景的时候一下子就能找到Bounds</p><p>给Bounds添加标签，便于找到</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710004327064.png" alt="image-20230710004327064"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> Cinemachine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SwitchBounds</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span>切换场景后更改</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SwitchConfinerShape();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SwitchConfinerShape</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        PolygonCollider2D confinerShape = GameObject.FindGameObjectWithTag(<span class="string">&quot;BoundsConfiner&quot;</span>).GetComponent&lt;PolygonCollider2D&gt;();</span><br><span class="line"></span><br><span class="line">        CinemachineConfiner confiner = GetComponent&lt;CinemachineConfiner&gt;();</span><br><span class="line"></span><br><span class="line">        confiner.m_BoundingShape2D = confinerShape;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每次runtime运行时清除缓存</span></span><br><span class="line">        confiner.InvalidatePathCache();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Bounds改成触发器</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710004923556.png" alt="image-20230710004923556"></p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710004934309.png" alt="image-20230710004934309"></p><h2 id="9-实现景观物体遮挡半透明"><a href="#9-实现景观物体遮挡半透明" class="headerlink" title="9.实现景观物体遮挡半透明"></a>9.实现景观物体遮挡半透明</h2><p>思路：设置颜色的半透明值</p><p>安装Dotween（一个有多种渐变效果的插件）</p><p>在Utilities包中编写一个setting脚本，用来存放所有的常量</p><p>编写颜色变换的脚本</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> DG.Tweening;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="meta">RequireComponent(typeof(SpriteRenderer))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemFader</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> SpriteRenderer spriteRenderer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 逐渐恢复颜色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FadeIn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Color targetColor = <span class="keyword">new</span> Color(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        spriteRenderer.DOColor(targetColor, Settings.fadeDuration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 逐渐半透明</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FadeOut</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Color targetColor = <span class="keyword">new</span> Color(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, Settings.targetAlpha);</span><br><span class="line">        spriteRenderer.DOColor(targetColor, Settings.fadeDuration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给人物挂载一个触发器脚本</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TriggerItemFader</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ItemFader[] faders = other.GetComponentsInChildren&lt;ItemFader&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(faders.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> faders)</span><br><span class="line">            &#123;</span><br><span class="line">                item.FadeOut();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerExit2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ItemFader[] faders = other.GetComponentsInChildren&lt;ItemFader&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (faders.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> faders)</span><br><span class="line">            &#123;</span><br><span class="line">                item.FadeIn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给树的父物体设置一个碰撞器</p><p>子物体添加itemfade脚本</p><h2 id="10-背包数据初始化"><a href="#10-背包数据初始化" class="headerlink" title="10.背包数据初始化"></a>10.背包数据初始化</h2><p>工具类写一个数据集合的脚本</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemDetails</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> itemID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ItemType itemType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Sprite itemIcon;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Sprite itemOnWorldSprite;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> itemUseRadius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> canPickedup;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> canDropped;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> canCarried;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> itemPrice;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Range(0, 1)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> sellPercentage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写一个脚本来设置库存的细节（MVC）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;ItemDAtaList_SO&quot;</span>, menuName = <span class="string">&quot;Inventory/ItemDataList&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemDataList_SO</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;ItemDetails&gt; itemDetails;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/b238e0b7.htm/2D%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/image-20230710015922895.png" alt="image-20230710015922895"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构学习（3）</title>
      <link href="/wang666-bot.github.io/post/9ffacff6.html"/>
      <url>/wang666-bot.github.io/post/9ffacff6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h1><p>任何比较器的compare原则遵循一个统一规范：</p><p>​返回负数的时候，认为第一个参数应该排在前面</p><p>​返回正数的时候，认为第二个参数应该排在前面</p><p>​返回0的时候，任务无所谓谁放前面</p><p>treeMap中：相等的比较，会认为是重复的，不会覆盖</p><h1 id="堆（优先级队列）"><a href="#堆（优先级队列）" class="headerlink" title="堆（优先级队列）"></a>堆（优先级队列）</h1><p>完全二叉树（要么是满的，要么在从左往右依次变满的过程中）</p><p>数组中i位置的数</p><p>左节点2*i + 1</p><p>右节点2*i + 2</p><p>父 （i-1）&#x2F; 2</p><p>大根堆：每棵子数的最大值是头节点</p><p>小根堆：每棵子数的最小值是头节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新加进来的数，现在停在了index位置，请依次往上移动，</span></span><br><span class="line"><span class="comment">// 移动到0位置，或者干不掉自己的父亲了，停！</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="comment">// [index] [index-1]/2</span></span><br><span class="line"><span class="comment">// index == 0</span></span><br><span class="line"><span class="keyword">while</span> (arr[index] &gt; arr[(index - <span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">swap(arr, index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删掉堆上的max，把大根堆上0位置和heap最后的位置的数交换，heapSize–</p><p>复杂度的估计：</p><p>第一步可能需要遍历高度log1， 第二步高度log2….. 第N步高度logN</p><p>上限N*logN</p><p>当数据量为2N的时候，时间复杂度的下限是N*logN</p><p>堆排序</p><p>1，先让整个数组都变成大根堆结构，建立堆的过程: </p><p>  1)从上到下的方法，时间复杂度为O(N*logN) </p><p>  2)从下到上的方法，时间复杂度为O(N) </p><p>2，把堆的最大值和堆末尾的值交换，然后减少堆的大小之后，再去调整堆，一直周而复始，时间复杂度为O(N*logN) </p><p>3，堆的大小减小成0之后，排序完成</p><p>实际问题</p><p>1.最小K范围</p><p>2.最大线段重合问题</p><p>找到min开和max结</p><p>1）暴力方法：在[min开， max结]遍历求出每个.5的值，求出最大值    O((max - min) * N)</p><p>2）优化方法：每个位置按开始位置从小到大排序（比较器），准备一个小根堆，每个数结尾位置放进去</p><p>每个线段以自己的起点为起点，求最大的重合线段数目  O(NlogN）</p><p>手动改写堆</p><p>改动内部属性后，系统原始的堆无法识别，且没有内部反向索引表</p><p>问题：得奖问题</p><h1 id="前缀树（Prefix-tree-trie）"><a href="#前缀树（Prefix-tree-trie）" class="headerlink" title="前缀树（Prefix tree   trie）"></a>前缀树（Prefix tree   trie）</h1><p>1)单个字符串中，字符从前到后额加到一颗多叉树上</p><p>2）字符放在路上，节点上有专属的数据项（常见的是pass和end值）</p><p>3）所有样本都这样添加，如果没有路就新建，如有路就复用</p><p>4）沿途节点的pass值增加1，每个字符串结束时来到的节点end值增加1</p><p>注：哈希表增删改查 O(1)，但单样本长度过大，则O(单样本平均长度)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> pass;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> end;</span><br><span class="line"><span class="keyword">public</span> Node[] nexts;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span>()</span> &#123;</span><br><span class="line">pass = <span class="number">0</span>;</span><br><span class="line">end = <span class="number">0</span>;</span><br><span class="line">nexts = <span class="keyword">new</span> Node[<span class="number">26</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span>()</span> &#123;</span><br><span class="line">root = <span class="keyword">new</span> Node();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">String word</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (word == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">char</span>[] str = word.toCharArray();</span><br><span class="line">Node node = root;</span><br><span class="line">node.pass++;</span><br><span class="line"><span class="built_in">int</span> path = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123; <span class="comment">// 从左往右遍历字符</span></span><br><span class="line">path = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 由字符，对应成走向哪条路</span></span><br><span class="line"><span class="keyword">if</span> (node.nexts[path] == <span class="literal">null</span>) &#123;</span><br><span class="line">node.nexts[path] = <span class="keyword">new</span> Node();</span><br><span class="line">&#125;</span><br><span class="line">node = node.nexts[path];</span><br><span class="line">node.pass++;</span><br><span class="line">&#125;</span><br><span class="line">node.end++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span>(<span class="params">String word</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (countWordsEqualTo(word) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">char</span>[] chs = word.toCharArray();</span><br><span class="line">Node node = root;</span><br><span class="line">node.pass--;</span><br><span class="line"><span class="built_in">int</span> path = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">path = chs[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (--node.nexts[path].pass == <span class="number">0</span>) &#123;</span><br><span class="line">node.nexts[path] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">node = node.nexts[path];</span><br><span class="line">&#125;</span><br><span class="line">node.end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">countWordsEqualTo</span>(<span class="params">String word</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (word == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">char</span>[] chs = word.toCharArray();</span><br><span class="line">Node node = root;</span><br><span class="line"><span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">index = chs[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (node.nexts[index] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">node = node.nexts[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node.end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">countWordsStartingWith</span>(<span class="params">String pre</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">char</span>[] chs = pre.toCharArray();</span><br><span class="line">Node node = root;</span><br><span class="line"><span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">index = chs[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (node.nexts[index] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">node = node.nexts[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node.pass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="不基于比较的排序"><a href="#不基于比较的排序" class="headerlink" title="不基于比较的排序"></a>不基于比较的排序</h1><h2 id="计数排序（桶排序）——-容器思想O-N"><a href="#计数排序（桶排序）——-容器思想O-N" class="headerlink" title="计数排序（桶排序）—— 容器思想O(N)"></a>计数排序（桶排序）—— 容器思想O(N)</h2><h2 id="基数排序（非负，十进制来表示）——-先根据个位数排序，先进先出倒出桶，从左往右，再根据十位数倒入桶……"><a href="#基数排序（非负，十进制来表示）——-先根据个位数排序，先进先出倒出桶，从左往右，再根据十位数倒入桶……" class="headerlink" title="基数排序（非负，十进制来表示）—— 先根据个位数排序，先进先出倒出桶，从左往右，再根据十位数倒入桶……."></a>基数排序（非负，十进制来表示）—— 先根据个位数排序，先进先出倒出桶，从左往右，再根据十位数倒入桶…….</h2><h2 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h2><p>稳定性是指同样大小的样本在排序之后不会改变相对次序（对非基础类型重要）</p><p>工程上对排序的改进</p><p>1）稳定性的考虑   Java的Arrays.sort针对基础类型使用快排，非基础类型使用归并保证稳定性</p><p>2）充分利用O(NlogN)大样本和O(N^2)小样本排序各自的优势</p><h1 id="链表问题"><a href="#链表问题" class="headerlink" title="链表问题"></a>链表问题</h1><p>1.快慢指针</p><p>2.笔试的链表都使用容器</p><p>2.面试，时间复杂度放在第一位，快慢指针</p><p>面试题：</p><p>1.判断回文结构</p><p>容器方法：遍历一遍，放入栈中，在遍历一遍，栈中弹出，判断是否一致，弹出的顺序就是逆序</p><p>指针：找到中点，中点之后的链表逆序，两个指针，L， R，判断是否一样</p><p>2.链表的L1R1L2R2排序</p><p>指针方法：在1题的基础上，串起来</p><p>3.单向链表按某值划分成左大中间相等右边大的形式</p><p>容器方法：放到数组，然后快排</p><p>指针方法：分成小头小尾区域，等头等尾区域，大头大尾区域</p><p>4.拷贝链表random指针问题</p><p>容器方法：map，key是老节点，value是新节点</p><p>指针方法：生成新节点插在原始节点和其next节点之间，新节点的random节点就是原始节点的random的next，最后分离新老结构</p><p>5.给定两个可能无环有环的链表相交的点</p><p>判断有无环：快慢指针</p><p>容器方法：HashSet，最后能否null</p><p>判断相交：分情况</p><p>1）都无环</p><p>容器方法：HashSet</p><p>指针方法：长度相减，快慢指针</p><p>2）一个有环一个无环</p><p>不可能相交</p><p>3）都有环</p><p>  1.不相交</p><p>  2.相交的点在入环节点前</p><p>  3.相交的点在环上（不是同一个入环节点）</p><p>容器方法：比较入环节点的地址，判断是否是2</p><p>第一个入环节点一直next，看能否遇到第二个入环节点分辨出1和3</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架</title>
      <link href="/wang666-bot.github.io/post/766433e0.html"/>
      <url>/wang666-bot.github.io/post/766433e0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>Core Container:核心容器</p><p>AOP：面向切面编程</p><p>Aspects：AOP思想实现</p><p>Data Access：数据访问</p><p>Data Integration：数据集成</p><p>Web：Web开发</p><p>Test：单元测试与集成测试</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构学习（2）</title>
      <link href="/wang666-bot.github.io/post/2746a893.html"/>
      <url>/wang666-bot.github.io/post/2746a893.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>复杂度O(NlogN)</p><p><strong>merge过程</strong>：左部分有序，右部分有序，准备一个辅助数组，左边一个指针，右边一个指针，谁小拷贝谁 O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请把arr[L..R]排有序</span></span><br><span class="line"><span class="comment">// l...r N</span></span><br><span class="line"><span class="comment">// T(N) = 2 * T(N / 2) + O(N)</span></span><br><span class="line"><span class="comment">// O(N * logN)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) &#123; <span class="comment">// base case</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">process(arr, L, mid);</span><br><span class="line">process(arr, mid + <span class="number">1</span>, R);</span><br><span class="line">merge(arr, L, mid, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> L;</span><br><span class="line"><span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> M + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= M &amp;&amp; p2 &lt;= R) &#123;</span><br><span class="line">help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要么p1越界了，要么p2越界了</span></span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= M) &#123;</span><br><span class="line">help[i++] = arr[p1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (p2 &lt;= R) &#123;</span><br><span class="line">help[i++] = arr[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">arr[L + i] = help[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归方法实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="comment">// 步长</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mergeSize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (mergeSize &lt; N) &#123; <span class="comment">// log N</span></span><br><span class="line"><span class="comment">// 当前左组的，第一个位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (L &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (mergeSize &gt;= N - L) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> L + mergeSize - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> M + Math.min(mergeSize, N - M - <span class="number">1</span>);</span><br><span class="line">merge(arr, L, M, R);</span><br><span class="line">L = R + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防止溢出</span></span><br><span class="line"><span class="keyword">if</span> (mergeSize &gt; N / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">mergeSize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(N^2)的排序大量浪费比较行为</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="（1）小和问题"><a href="#（1）小和问题" class="headerlink" title="（1）小和问题"></a>（1）小和问题</h3><p>​给一个数组，给出所有比arr[i]左边比他小的数的和，所有都累加起来    O(NlogN)</p><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">smallSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr[L..R]既要排好序，也要求小和返回</span></span><br><span class="line"><span class="comment">// 所有merge时，产生的小和，累加</span></span><br><span class="line"><span class="comment">// 左 排序   merge</span></span><br><span class="line"><span class="comment">// 右 排序  merge</span></span><br><span class="line"><span class="comment">// merge</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// l &lt; r</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">process(arr, l, mid) </span><br><span class="line">+ </span><br><span class="line">process(arr, mid + <span class="number">1</span>, r) </span><br><span class="line">+ </span><br><span class="line">merge(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> m, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[r - L + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> L;</span><br><span class="line"><span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> m + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= m &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">res += arr[p1] &lt; arr[p2] ? (r - p2 + <span class="number">1</span>) * arr[p1] : <span class="number">0</span>;</span><br><span class="line">help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= m) &#123;</span><br><span class="line">help[i++] = arr[p1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">help[i++] = arr[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">arr[L + i] = help[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><p>归并排序过程中，merge的时候计算小和，相等的时候先拷贝右组</p><h3 id="（2）逆序对问题"><a href="#（2）逆序对问题" class="headerlink" title="（2）逆序对问题"></a>（2）逆序对问题</h3><p>求一个数组中有多少逆序对</p><h3 id="（3）num的右边有多少个数-2之后依然小于num"><a href="#（3）num的右边有多少个数-2之后依然小于num" class="headerlink" title="（3）num的右边有多少个数*2之后依然小于num"></a>（3）num的右边有多少个数*2之后依然小于num</h3><p><strong>不回退技巧</strong></p><p>给定一个数组，值无序，有正有负有0</p><p>方法getSum(arr,i,j)</p><p>前缀和数组方法，前缀和数组相减</p><p>先根据arr数组得出preSum数组</p><h3 id="补充题目：leetcode-count-of-range-sum"><a href="#补充题目：leetcode-count-of-range-sum" class="headerlink" title="补充题目：leetcode count of range sum"></a>补充题目：leetcode count of range sum</h3><p>给定一个数组，求有多少子数组的累加和在给定的区间大小范围内，O(NlogN)</p><p>思路：必须以0位置结尾的数组，有几个达标</p><p>​  必须以1位置结尾的数组，有几个达标</p><p>​  。。。。。</p><p>​      最后把所有的累加起来就是答案</p><p>假设0-i位置整体累加和是X，题目目标是[L, UP],求必须以i位置结尾的子数组，目标有多少个在[L,UP]范围上</p><p>等同于去求i之前的所有前缀和中有多少个前缀和在[X-UP,X-L]上</p><h3 id="荷兰国旗问题-（快排）"><a href="#荷兰国旗问题-（快排）" class="headerlink" title="荷兰国旗问题 - （快排）"></a>荷兰国旗问题 - （快排）</h3><p>1）数组小于x放左，大于x放右</p><p>思路：设计一个小于等于区域</p><p>​1）当前数小于等于目标数，当前数和小于等于区域的下一个数交换，小于等于区域往右跳</p><p>​2）当前数大于目标，跳下一个</p><p>2）小于放左 等于中间 大于放右边</p><p>思路：</p><p>​1）当前数&lt; 目标数 和小于区的下一个数交换，小于区往右扩</p><p>​2）当前数&#x3D;目标数 当前数直接跳</p><p>​3）当前数&gt;目标数当前数和大于区前一个数交换，大于区向左扩，继续当前数</p><p>快排</p><p>在荷兰国旗2）的基础上目标的选取是随机的</p><p>快排的额外空间复杂度O(logN)，时间复杂度O(NlogN)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聚合搜索平台</title>
      <link href="/wang666-bot.github.io/post/9f02e53a.html"/>
      <url>/wang666-bot.github.io/post/9f02e53a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>一个聚合搜索平台，<strong>可以让用户在同一个入口（同一个页面）集中搜索出不同来源、不同类型的内容</strong></p><p>用户：提升用户的检索效率、提升用户体验</p><p>企业：无需针对每一个项目都去开发一个搜索功能，当有新的内容、新的网站，可以复用同一套搜索系统，提升开发效率</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p><strong>前端：</strong></p><p>​Vue</p><p>​Ant Design Vue</p><p>​Lodash</p><p><strong>后端</strong></p><p>​Spring Boot</p><p>​MySQL</p><p>​Elasticsearch（Elastic Stack）搜索引擎</p><p>​数据抓取</p><p>​数据同步（4种方法）</p><p>​logstash</p><p>​Canal</p><p>​Guava Retrying</p><p>​怎么保证API的稳定性</p><h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><p>​1.先得到各种不同分类的资源</p><p>​2.提供一个搜索页面（单一搜索 + 聚合搜索），支持搜索</p><p>​3.（可以去做一些优化，比如关键词高亮、防抖节流）</p><h1 id="6-28"><a href="#6-28" class="headerlink" title="6.28"></a>6.28</h1><p>前端后端项目初始化</p><p>前端搜索页面开发完成</p><p>后端基本搜索接口开发</p><p>用url记录页面搜索状态，当用户刷新页面时，能够从url还原之前的搜索状态</p><p>url &lt; &#x3D; &gt; 页面状态</p><p>技巧：把同步状态改成单向，即只允许url来改变页面状态，不允许反向</p><p>​1.让用户在操作的时候，改变url地址（点击搜索框，搜索内容填充到url上，切换tab时，也要填充）</p><p>​2.当url改变的时候，去改变页面状态（监听url的改变）</p><h1 id="6-29"><a href="#6-29" class="headerlink" title="6.29"></a>6.29</h1><p>1.获取多种不同类型的数据源</p><p>​a.文章（内部）</p><p>​b.用户（内部）</p><p>​c.图片（外部，不是自己的项目、自己的用户生产的数据）</p><p>2.前后端单独搜索接口联调，跑通整个页面</p><p>3.分析现有项目的问题 &#x3D;&gt; 优化，聚合接口的开发</p><p>4.安装ES</p><h3 id="获取不同类型的数据源"><a href="#获取不同类型的数据源" class="headerlink" title="获取不同类型的数据源"></a>获取不同类型的数据源</h3><p>1.获取文章</p><p>内部没有，就只能从互联网上获取基础数据  &#x3D;&gt; 爬虫</p><p>数据抓取的几种方式：</p><p>1.直接请求数据结构（最方便）HttpClient、OKHttp、RestTemplate、Hutool</p><p>2.等网页渲染出明文内容，从前端页面的内容抓取</p><p>3.有一些网站可能是动态请求的，他不会一次性加载所有的数据，而是要点某个按钮、输入某个验证码才会显示出数据&#x3D;&gt; 无头浏览器</p><p>selenum、puppeteer</p><p>hutool：<a href="https://doc.hutool.cn/pages/index/">https://doc.hutool.cn/pages/index/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue Java 搜索平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统</title>
      <link href="/wang666-bot.github.io/post/51334077.html"/>
      <url>/wang666-bot.github.io/post/51334077.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>介绍：帮助大家找到合适的伙伴，移动端H5网页</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>1.用户去添加标签，标签的分类（要有哪些标签、怎么把标签进行分类）学习方向：Java&#x2F;C++，工作&#x2F;大学</p><p>2.主动搜索：允许用户根据标签去搜索其他用户</p><p>​1.Redis缓存 + 本地</p><p>3.组队</p><p>​1.创建队伍</p><p>​2.加入队伍</p><p>​3.根据标签查询队伍</p><p>​4.邀请其他人</p><p>4.允许用户去修改标签</p><p>5.推荐</p><p>​1.相似度计算算法 + 本地分布式计算</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>​<strong>前端</strong> </p><p>​1.Vue3开发框架（提高页面开发的效率）</p><p>​2.Vant UI（基于Vue的移动端组件库）（React版Zent）</p><p>​3.Vite（打包工具，快）</p><p>​4.Nginx单机部署</p><p>​<strong>后端</strong></p><p>​1.Java + SpringBoot框架</p><p>​2.SpringMVC+ MyBatis + Mybatis Plus</p><p>​3.MySQL数据库</p><p>​4.Redis缓存</p><p>​5.Swagger + Knife4j接口文档</p><h2 id="6-20"><a href="#6-20" class="headerlink" title="6.20"></a>6.20</h2><p>1.前端项目初始化</p><p>2.数据库表设计</p><p>​1.标签表</p><p>​2.用户表</p><p>3.前端主页 + 组件概览</p><p>4.开发后端 - 根据标签搜索用户</p><p>5.开发前端 - 根据标签搜索用户</p><h2 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h2><p>用脚手架初始化项目</p><p>​Vue Cli <a href="https://cli.vuejs.org/zh/index.html">https://cli.vuejs.org/zh/index.html</a></p><p>​Vite 脚手架</p><p>整合组件库 Vant</p><p>​按需引入</p><p>开发页面经验</p><p>​1.多参考</p><p>​2.从整体到局部</p><p>​3.先想清楚页面要做成什么样子，再写代码</p><h2 id="前端主页-组件概览"><a href="#前端主页-组件概览" class="headerlink" title="前端主页 + 组件概览"></a>前端主页 + 组件概览</h2><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>导航条：展示当前页面名称</p><p>主页搜索框 &#x3D;&gt; 搜索页 &#x3D;&gt; 搜索结果页（标签筛选页）</p><p>内容</p><p>tab栏：</p><p>​  主页（推荐页）</p><p>​搜索页</p><p>​banner</p><p>​推荐信息流</p><p>​  队伍页</p><p>​  用户页（消息 - 暂时考虑发邮件）</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>很多页面要复用组件 &#x2F; 样式，重复写很麻烦，不利于维护，所以抽象一个通用的布局（Layout）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能Bi项目笔记</title>
      <link href="/wang666-bot.github.io/post/266ed923.html"/>
      <url>/wang666-bot.github.io/post/266ed923.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>BI商业智能： 数据可视化、报表可视化效果</p><p>传统BI平台：</p><ol><li><p>需要人工上传数据</p></li><li><p>需要人工托选分析要用到的数据行和列</p></li><li><p>需要人工选择图表类型 </p></li><li><p>生成图表</p></li></ol><p>智能BI平台：</p><p>区别于传统的BI，用户只需要导入最原始的数据集，输入想要进行分析的目标，就能利用AI生成一个符合要求的图表以及结论</p><p>需求分析：</p><p>1.智能分析：用户输入目标和原始数据（图表类型），可以字段生成图标和分析结论</p><p>2.图标管理</p><p>3.图表生成的异步化（消息队列）</p><p>4.对接AI能力</p><p>架构图</p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/266ed923.htm/boke/Blog/source/_posts/智能Bi项目笔记/image-20230525212759901.png"><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/266ed923.htm/%E6%99%BA%E8%83%BDBi%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/image-20230525212759901.png" alt="image-20230525212759901"></p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/266ed923.htm/%E6%99%BA%E8%83%BDBi%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/image-20230525213340151.png" alt="image-20230525213340151"></p><p>技术栈：</p><p>前端</p><p>​1.React</p><p>​2.Umi + Ant Design Pro</p><p>​3.可视化开发库（Echarts）</p><p>​4.umi openai 代码生成（自动生成后端调用代码）</p><p>后端</p><p>​1.Spring Boot</p><p>​2.MySQL数据库</p><p>​3.MyBatis Plus数据访问框架</p><p>​4.消息队列（RabbitMQ）</p><p>​5.AI能力（Open AI接口开发 &#x2F; 提供现成的AI接口）</p><p>​6.Excel的上传和数据的解析（Easy Excel）</p><p>​7.Swagger +Knife4j（项目接口文档）</p><p>​8.Hutool工具库</p><h1 id="5-25"><a href="#5-25" class="headerlink" title="5.25"></a>5.25</h1><p>前端项目初始化</p><p>后端项目初始化</p><p>前端开发</p><p>​快速开发登录功能</p><p>​图表分析页面的开发</p><p>​图标管理页面的开发</p><p>后端开发</p><p>​库表设计</p><p>​图标管理开发</p><p>​文件上传接口开发</p><p>前后端业务流程跑通</p><h2 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id           <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    userAccount  <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">    userPassword <span class="type">varchar</span>(<span class="number">512</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    userName     <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">null</span> comment <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">    userAvatar   <span class="type">varchar</span>(<span class="number">1024</span>)                          <span class="keyword">null</span> comment <span class="string">&#x27;用户头像&#x27;</span>,</span><br><span class="line">    userRole     <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="string">&#x27;user&#x27;</span>            <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户角色：user/admin&#x27;</span>,</span><br><span class="line">    createTime   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    isDelete     tinyint      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span>,</span><br><span class="line">    index idx_unionId (unionId)</span><br><span class="line">) comment <span class="string">&#x27;用户&#x27;</span> <span class="keyword">collate</span> <span class="operator">=</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">--图标信息表chart</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> chart</span><br><span class="line">(</span><br><span class="line">    id           <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    goal         text   <span class="keyword">null</span>  comment  <span class="string">&#x27;分析目标&#x27;</span>,</span><br><span class="line">    chartData    text   <span class="keyword">null</span>  comment  <span class="string">&#x27;图表数据&#x27;</span>,</span><br><span class="line">    chartType    <span class="type">varchar</span>(<span class="number">128</span>)  <span class="keyword">null</span>   comment  <span class="string">&#x27;图表类型&#x27;</span>,</span><br><span class="line">    genChart     text   <span class="keyword">null</span>   comment  <span class="string">&#x27;生成的图表数据&#x27;</span>,</span><br><span class="line">    genResult    text   <span class="keyword">null</span>   comment  <span class="string">&#x27;生成的分析结论&#x27;</span>,</span><br><span class="line">    userId       <span class="type">bigint</span> <span class="keyword">null</span>   comment <span class="string">&#x27;创建用户id&#x27;</span>  ,</span><br><span class="line">    createTime   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    isDelete     tinyint      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span>,</span><br><span class="line">) comment <span class="string">&#x27;图标信息表&#x27;</span> <span class="keyword">collate</span> <span class="operator">=</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自动生成后端增删改查代码</p><p>1.建表</p><p>2.mybatisX插件生成代码</p><p>3.迁移生成的代码</p><p>4.复制老的增删改查模板，根据新的表重构</p><p>5.根据接口文档来测试</p><p>前端调用后端</p><p>前端更改对应的请求地址：在app.tsx里修改baseURL</p><h2 id="6-2"><a href="#6-2" class="headerlink" title="6.2"></a>6.2</h2><p>1.前置准备</p><p>2.开发登录、注册页面</p><p>3.学习使用AI生成BI图标的完整流程（梳理功能点和工作）</p><p>4.开发智能分析功能</p><p>​文件上传（前后端）</p><p>​Excel处理</p><p>5.图表管理功能</p><h3 id="初始化项目-开发前准备"><a href="#初始化项目-开发前准备" class="headerlink" title="初始化项目-开发前准备"></a>初始化项目-开发前准备</h3><p>前端初始化的优化</p><p>.husky提交代码时，检查是否规范</p><p>1.修改端口</p><p>2.删除mock数据（因为本地有后端）</p><p>3.替换logo</p><p>4.删除国际化locales目录</p><p>5.删除测试相关目录</p><p>6.prettier、eslint、editorConfig、stylelint，需要开启prettier美化配置</p><p>7.替换网站标题：全局替换 Ant Design Pro和Ant Design</p><p>开发登陆注册页面</p><p>先删掉不需要的，再根据后端去做调整（和后端联调）</p><p>如果登陆后还是没法进入页面，修改全局请求配置app.tsx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const request = &#123;</span><br><span class="line">  baseURL: &quot;http://localhost:8101&quot;,</span><br><span class="line">  withCredentials: true,</span><br><span class="line">  ...errorConfig,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改requestErrorConfig文件，可以自定义全局请求响应拦截器</p><p>注册页面的开发参考 用户中心项目</p><h2 id="智能分析业务开发"><a href="#智能分析业务开发" class="headerlink" title="智能分析业务开发"></a>智能分析业务开发</h2><p>业务流程</p><p>​1.用户输入</p><p>​a.分析目标</p><p>​b.上传原始数据（excel）</p><p>​c.更精细地控制图表：比如图表类型、图标名称等</p><p>​2.后端校验</p><p>​a.校验用户地输入是否合法（比如长度）</p><p>​b.成本控制（次数统计和校验、鉴权等）</p><p>​3.把处理后地数据输入到AI模型（调用AI接口，），让AI模型给我们提供图表信息、结论文本</p><p>​4.图表信息（是一段json配置，是一段代码）、结论文本在前端进行展示</p><p>开发接口</p><p>根据用户的输入（文本和文件），最后返回图表信息和结论文本</p><p>给chart表补充name字段</p><p>原始数据压缩</p><p>AI接口普遍都有输入字数限制，尽可能压缩数据，能够允许多传几行数据</p><p>如何向AI提词（prompt）？</p><p>AI提词技巧 1：持续输入，持续优化</p><p>AI提词技巧 2：数据压缩（提取关键词）</p><p>使用csv对excel文件的数据进行提取和压缩</p><p>Easy Excel</p><p>一步一步来，先读出数据</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/266ed923.htm/%E6%99%BA%E8%83%BDBi%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/image-20230605194352972.png" alt="image-20230605194352972"></p><p>调用AI</p><p>输入：</p><p>系统预设（提前告诉他职责、功能、回复格式要求）+ 分析目标 + 压缩后的数据</p><p>最简单的系统预设：你是一个数据分析师，接下来我会给你应变片受力的最原始的数据和分析目标，请告诉我关于应变片受力情况的分析结论</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/266ed923.htm/%E6%99%BA%E8%83%BDBi%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/image-20230605202137843.png" alt="image-20230605202137843"></p><p>AI题词技巧3：在系统（模型）层面做预设效果一般来说，会比直接拼接在用户消息里效果更好一些</p><p>AI提词技巧4：除了系统预设外，额外关联一问一答两条消息，相当于给AI一个提示</p><h2 id="6-6"><a href="#6-6" class="headerlink" title="6.6"></a>6.6</h2><p>1.跑通整个智能分析功能的业务流程</p><p>​后端</p><p>​前端</p><p>2.开发图表管理功能</p><p>3.系统优化</p><p>智能分析业务流程开发</p><p>生成结论</p><p>生成图表</p><p>AI 无法直接生成现成的图表，但是AI可以生成代码 &#x3D;&gt; 可以把代码利用前端的组件库（Echarts）在网页进行展示</p><p>预期生成的图表代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">150</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">218</span>, <span class="number">135</span>, <span class="number">147</span>, <span class="number">260</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="AI提问技巧"><a href="#AI提问技巧" class="headerlink" title="AI提问技巧"></a>AI提问技巧</h2><p>严格控制提问词</p><p>0）使用系统预设</p><p>1）控制输入格式（便于AI精确地理解我们地需求）</p><p>2）控制输出格式（便于AI返回的内容能够更加方便地为我们所用）</p><p>3）指定一个示例问答， one-shot问答</p><p>3种调用AI的方式</p><p>1.直接调用OpenAI或者其他AI原始大模型官网的接口</p><p>1）在请求头中指定OPENAI_API_KEY</p><p>Authorization: Bearer OPEN_API_KEY</p><p>2）找到要使用的接口，比如AI对话接口</p><p>3）按照</p><p>本质上OpenAI就是提供Http接口</p><p>2.使用云服务商提供的，封装后的AI接口</p><p>3.利用平台AI提供的开放SDK</p><p>智能接口实现</p><p>1.构造用户请求（用户消息、csv数据、图表类型等）</p><p>2.调用sdk，得到AI响应结果</p><p>3.从响应结果中，得出需要的信息，</p><p>4.保存图表到数据库</p><p>前端开发</p><p>输入表单</p><p>文件上传时，注意取出原始对象</p><p>生成的图表</p><p>使用echarts for react</p><h2 id="6-7"><a href="#6-7" class="headerlink" title="6.7"></a>6.7</h2><p>1.开发图表管理功能</p><p>2.优化系统</p><p>开发图表管理功能（增删改查）</p><p>后端：复用springboot-init初始化模板的增删改查代码，核心：获取个人创建的图表列表</p><p>listMyChartByPage</p><p>前端：</p><p>​1.开发一个列表页</p><p>​2.支持按照图表名称搜索</p><p>​</p><p>步骤：</p><p>1.创建路由和页面</p><p>2.获取需要的数据，定义state变量来存储数据，用于给页面展示</p><p>3.先把最简单直观的数据展示给前端，再去调样式</p><p>4.引入Ant Design 的List组件复制示例代码</p><p>5.调整List组件中的内容为自己的（注意，获取用户头像可以从初始化状态中获取）</p><p>6.针对样式，对数据做一些处理，比如统一隐藏图标自身的title</p><p>7.增加分页</p><p>8.增加搜索框</p><p>9.其他效果，比如loading效果</p><p>小知识：</p><p>1.原子化CSS</p><p>2.利用F12控制台进行弱网测试</p><p>安全性</p><p>如果用户上传一个超大的文件怎么办？</p><p>只要涉及到用户自主上传的操作，一定要校验文件（图像）</p><p>校验的维度：</p><p>​文件的大小</p><p>​文件的后缀</p><p>​文件的内容（成本较高）</p><p>​文件的合规性（比如敏感内容，建议用第三方的审核功能）</p><p>扩展点：接入腾讯云的图片万象数据审核（COS对象存储的审核功能）</p><p>数据存储</p><p>现状：把每个图表的原始数据全部存放在同一个数据表（chart表）的字段里，</p><p>问题：</p><p>​1.如果用户上传的原始数据量很大、图表数日益增多，查询Chart表就会很慢</p><p>​2.对于BI平台，用户是有查看原始数据、对原始数据进行简单查询的需求的，现在如果把所有数据都放在一个字段（列）中，查询时只能取出这个列的所有内容</p><p>解决方案 &#x3D;&gt; 分库分表：</p><p>​把每个图表对应的原始数据单独保存为一个新的数据表，而不是一个都存在一个字段里</p><p>这样，</p><p>​存储时，能够分开存储，互不影响（也能增加安全性）</p><p>​查询时，可以使用各种sql语句灵活取出需要的字段，查询性能更快</p><p>实现：</p><p>分开存储：</p><p>​1.存储图标信息时，不把数据存储为字段，而是新建一个chart_{图表id}的数据表</p><p>​通过图表id、数据列名、数据类型等字段，生成以下SQL语句，并且执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> chart_12213141414141</span><br><span class="line">&#123;</span><br><span class="line">日期 <span class="type">int</span> <span class="keyword">null</span>,</span><br><span class="line">用户数 <span class="type">int</span> <span class="keyword">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分开查询：</p><p>1.以前直接查询图表，取chartData字段，现在改为读取chart_{图表id}的数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> chart_12213141414141</span><br></pre></td></tr></table></figure><p>具体实现：MyBatis的动态SQL（根据代码灵活地动态生成）</p><p>1.想清楚哪些是需要动态替换的，比如要查询的数据表名</p><p>2.在mapper.xml中定义sql语句</p><p>以下这种方式最灵活，但是要小心sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;queryChartData&quot; parameterType<span class="operator">=</span>&quot;string&quot; resultType<span class="operator">=</span>&quot;map&quot;<span class="operator">&gt;</span></span><br><span class="line">       $&#123;querySql&#125;</span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在ChartMapper中定义方法，方法名和上一步的select的id相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; queryChartData(String querySql);</span><br></pre></td></tr></table></figure><p>sql注入：select * from chart_12345 where id &#x3D; 1 or 1 &#x3D; 1</p><p>测试调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">chartId</span> <span class="operator">=</span> <span class="string">&quot;1665616911881228290&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">querySql</span> <span class="operator">=</span> String.format(<span class="string">&quot;select * from chart_%s&quot;</span>,chartId);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; result = chartMapper.queryChartData(querySql);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p>分库分表</p><p>​水平分表</p><p>​垂直分库</p><p>根据实际的业务场景和技术架构情况，综合考虑各种因素来选择适合自己的分库分表策略</p><p>限流</p><p>现在的问题：使用系统是需要消耗成本的，用户有可能疯狂刷量</p><p>解决问题：</p><p>​1. 控制成本 &#x3D; &gt; 限制用户调用总次数</p><p>​2.用户在短时间内疯狂使用，导致服务器资源被占满，其他用户无法使用 &#x3D;&gt; 限流</p><p>思考限流阈值多大合适？参考正常用户的使用， 比如限制单个用户在每秒只能使用1次</p><p>限流的几种算法</p><p>1）固定窗口限流</p><p>单位时间内允许部分操作</p><p>1小时只允许10个用户操作</p><p>优点：简单</p><p>缺点：可能出现流量突刺，前59分钟无操作，第59来了十个操作，第1小时01分钟来了十个操作，相当于2分钟来了20个操作，服务器仍有高峰危险</p><p>2）滑动窗口限流</p><p>单位时间内允许部分操作，但是这个单位时间是滑动的，需要指定一个滑动单位</p><p>优点：能够解决上述流量突刺的问题，只要还在这个窗口内，更多的操作就会被拒绝</p><p>缺点：实现相对复杂，限流效果和滑动单位有关，滑动单位越小，限流效果越好，但往往很难选到一个特别合适的滑动单位</p><p>3）漏桶限流（推荐）</p><p>以固定速率处理请求，当请求桶满了后，拒绝请求</p><p>每秒处理10个请求，桶的容量是10，每0.1秒固定处理一次请求，如果1秒内来了10个请求，都可以处理完，但如果1秒内来了11个请求，最后那个请求就会溢出桶被拒绝</p><p>优点：能够一定程度上应对流量突刺，能够<strong>固定速率处理请求</strong>，保证服务器的安全</p><p>缺点：没有办法迅速处理一批请求，只能一个一个按顺序来处理（固定速率的缺点）</p><p>4）令牌桶限流（推荐）</p><p>管理员先生成一批令牌，每秒生成10个令牌，当用户要执行操作前，先去拿到一个令牌，有令牌的人就有资格执行操作、能够同时执行操作，拿不到令牌的就等着</p><p>优点：能够并发处理同时的请求，<strong>并发性能会更好</strong></p><p>缺点：还是存在是按单位的选取问题</p><p>限流粒度</p><p>1.针对某个方法限流，即最多允许同时xx个操作使用该方法</p><p>2.针对某个用户限流，比如单个用户单位时间内最多执行xx个操作</p><p>3..针对某个用户x方法限流</p><p>限流的实现</p><p>1）本地限流（单机限流）</p><p>每个服务器单独限流，一般是适用于单体项目，就是项目只有一个服务器</p><p>Guava RateLimiter</p><p>2）分布式限流（多机限流）</p><p>如果项目有多个服务器，比如微服务，建议使用分布式限流</p><p>1.把用户的使用频率的等数据放到一个集中的存储进行统计，比如Redis，这样无论用户的请求落到了哪台服务器，都以集中的数据存储内的数据为准（Redisson-是一个操作Redis的工具库，伙伴匹配系统）</p><p>2.在网关集中进行限流和统计（比如Sentinel、Spring Cloud Gateway）</p><p>Redisson限流实现</p><p>Redisson内置了一个限流工具类，可以帮助利用Redis实现</p><p>RedisLimiterManager：什么是Manager？专门提供RedisLimiter限流基础服务的  （提供了通用的能力）</p><p>6.16</p><p>业务流程分析</p><p>问题：</p><p>​1.图表生成时间过长，AI能力需要一定时间来完成处理</p><p>​2.当系统面临大量用户请求时，如果处理能力有限，可能会导致用户处在一个长时间的等待状态。特别是当许多用户同时提交</p><p>​3.当我们调用第三方服务，比如我们的AI处理能力有限，大量用户同时请求可能导致AI过载，甚至拒绝请求</p><p>标准异步化的业务流程（服务处理能力有限，或者接口处理时长较长时，就应该考虑采用异步化）</p><p>同步：一件事情做完，再做另外一件事情</p><p>异步：在处理一件事情的同时，可以处理另外一件事情</p><p>业务流程分析</p><p>标准异步化的业务流程</p><p>1.当用户要进行耗时很长的操作时，点击提交后，不需要在界面傻等，而是应该把这个任务保存到数据库中记录下来</p><p>2.用户执行新任务时</p><p>​a.任务提交成功</p><p>​i. 如果我们的程序还有多余的空闲线程，可以立刻去做这个任务</p><p>​ii. 如果我们的程序的线程都在繁忙，无法继续处理，那就放到等待队列里</p><p>​b. 任务提交失败，比如我们的程序所有线程都在忙，任务队列满了</p><p>​i.拒绝这个任务，再也不执行</p><p>​ii.通过保存到数据库中的记录来看到提交失败的任务，并且在任务闲的时候，可以把任务从数据库中捞到程序里，再去执行</p><p>3.我们的程序（线程）从任务队列中取出任务依次执行，每完成一件事情后要修改一下任务的状态</p><p>4.用户可以查询任务的执行状态，或者在任务执行或失败时能得到通知（发邮件、系统消息提示、短信），从而优化操作</p><p>5.如果我们要执行的任务非常复杂，包含很多环节，在每一个小任务完成时，要在程序（数据库中）记录以下任务的执行状态（进度）</p><p>标准异步化的业务流程</p><p>​1.用户点击智能分析页的提交按钮时，先把图表立刻保存到数据库中（作为一个任务）</p><p>​2.用户可以在图表管理页面查看所有图表（已生成的、生成中的、生成失败）的信息和状态</p><p>问题：</p><p>​1.任务队列的最大容量应该设置为多少？</p><p>​2.程序怎么从任务队列中取出任务去执行？这个任务队列的流程怎么实现？怎么保证程序最多同时执行多少个任务？</p><p><strong>线程池</strong></p><p>为什么需要线程池？</p><p>​1.线程的管理比较复杂（比如什么时候新增线程，什么时候减少空闲线程）</p><p>​2.任务存取比较复杂（什么时候接收任务，什么时候拒绝任务，怎么保证大家不抢到同一个任务）</p><p>线程池的作用：帮助轻松管理线程、协调任务的执行过程</p><p>线程池的实现</p><p>不需要自己写，如果是在Spring中，可以用ThreadPoolTaskExecutor配合@Async注解来实现（不建议）</p><p>如果是在Java中，可以使用JUC并发编程包中的ThreadPoolExecutor来实现非常灵活的自定义线程池</p><p>线程池参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), handler);</span><br></pre></td></tr></table></figure><p>怎么确定线程池参数？结合实际业务场景和系统资源（实际情况）来测试调整，不断优化</p><p>回归到我们的业务，系统最脆弱的环节（系统的瓶颈）在哪里？</p><p>现有条件：比如AI生成能力的并发只允许4个线程同时去执行，AI能力运行20个任务排队</p><p>corePoolSize （核心线程数 &#x3D;&gt; 正式员工数）：正常情况下，我们的系统应该能同时工作的线程数（随时就绪的状态）</p><p>maximumPoolSize（最大线程数 &#x3D;&gt; 哪怕任务再多，也最多招这些人）：极限情况下，我们的线程池最多能有多少个线程？</p><p>keepAliveTime（空闲线程存活时间）：非核心线程在没有任务的情况下，过多久要删除（理解为开除临时工），从而释放无用的线程资源</p><p>TimeUnit unit（空闲线程存活时间的单位）：分钟、秒</p><p>workQueue（工作队列）：用于存放给线程执行的任务，存在一个队列的长度（一定要设置，不能说队列长度无限，因为也会占用资源）</p><p>threadFactory（线程工厂）：控制每个线程的生成、线程的属性（比如线程名）</p><p>RejectedExecutionHandler（拒绝策略）：任务队列满的时候，我们采取什么措施，比如抛异常、不抛异常、自定义策略</p><p>资源隔离策略：比如重要的任务（VIP任务）一个队列，普通任务一个队列，保证这两个队列互不干扰</p><p>一般情况下，任务分为IO密集型和计算密集型两种</p><p>计算密集型：吃CPU，比如音视频处理、图像处理、数学计算等，一般是设置corePoolSize为CPU的核数+1（空余线程）</p><p>可以让每个线程都能利用好CPU的每个核，而且线程之间不用频繁切换（减少打架、减少开销）</p><p>IO密集型：吃带宽&#x2F;内存&#x2F;硬盘的读写资源，corePoolSize可以设置大一点，一般经验值是2n左右，但是建议以IO的能力为主</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>定义线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">threadPoolExecutorConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(<span class="meta">@NotNull</span> Runnable r)</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                thread.setName(<span class="string">&quot;线程&quot;</span> + count);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">100</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10000</span>), threadFactory);</span><br><span class="line">        <span class="keyword">return</span> threadPoolExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交任务到线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;任务执行中：&quot;</span> + name + <span class="string">&quot;，执行人&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              Thread.sleep(<span class="number">60000</span>);</span><br><span class="line">          &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, threadPoolExecutor);</span><br></pre></td></tr></table></figure><p>开发</p><p>实现工作流程</p><p>1.给chart表新增任务状态字段（比如排队中、执行中、已完成、失败），任务执行信息字段（用于记录任务执行中，或者失败的一些信息）</p><p>2.用户点击智能分析页的提交按钮时，先把图表立刻保存到数据库中（作为一个任务），然后提交任务</p><p>3.任务：先修改图表任务状态为“执行中”，等执行成功后，修改为“已完成”，保存执行结果，执行失败后，状态修改为“失败”，记录任务失败信息</p><p>4.用户可以在图标管理页面查看所有图表（已生成的、生成中的、生成失败）的信息和状态</p><p>5.用户可以修改生成失败的图表信息、点击重新生成</p><p>库表设计</p><p>chart新增字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">status      <span class="type">varchar</span>(<span class="number">128</span>)   <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;wait&#x27;</span> comment <span class="string">&#x27;wait, running, succeed, failed&#x27;</span>,</span><br><span class="line">execMessage   text      <span class="keyword">null</span>  comment <span class="string">&#x27;执行信息&#x27;</span>,</span><br></pre></td></tr></table></figure><p>任务执行逻辑</p><p>先修改任务状态为执行中，减少重复执行的风险，同时让用户知道任务执行的状态</p><p>前端开发</p><p>1.复制一个异步创建图表页面</p><p>2.修改以下调用的接口为异步接口</p><p>3.移除无用元素和变量</p><p>4.修改成功后的操作，比如提示语和重置表单</p><p>5.调整我的图表页面，补充错误的处理</p><p>6.调整图表的查询顺序，按照创建时间降序</p><p>优化点</p><p>1.guava Retrying重试机制</p><p>2.更精确的提前考虑AI生成错误的情况，在后端进行异常处理（比如AI说了多余的话，提取正确的字符串）</p><p>3.如果说任务根本没提交到队列中（或者队列满了），是不是可以用定时任务把失败状态的图表放到队列中（补偿）</p><p>4.建议给任务的执行增加一个超时时间，超时后自动标记为失败（超时控制）</p><p>5.反向压力：通过调用的服务状态来选择当前系统的策略（比如根据AI服务的当前任务队列数来控制系统的核心线程数），从而最大化利用系统资源</p><p>6.我的图表页面增加一个刷新、定时自动刷新的按钮，保证获取到页面的最新状态（前端轮询）</p><p>7.任务执行成功或者失败，给用户发送实时消息通知（实时：websocket、 server side event）</p><h2 id="6-17"><a href="#6-17" class="headerlink" title="6.17"></a>6.17</h2><p>1.分析系统的现状 （不足）</p><p>2.入门分布式消息队列</p><p>3.RabbitMQ入门实战</p><p>4.项目拓展</p><h3 id="分析系统现在的不足（单机系统的不足）"><a href="#分析系统现在的不足（单机系统的不足）" class="headerlink" title="分析系统现在的不足（单机系统的不足）"></a>分析系统现在的不足（单机系统的不足）</h3><p>同步到异步的改造</p><p>现状：目前的异步是通过本地的线程池实现的</p><p>1）无法集中限制，只能单机限制</p><p>例如AI服务限制只能有2个用户同时使用，单个线程池可以i西安至最大核心线程数为2来实现</p><p>假设系统用量增大，改为分布式，多台服务器，每个服务器都要有2个线程池，就可能有2N个线程，超过了AI服务的限制</p><p>解决方案：在一个集中的地方去管理下发任务（比如集中存储当前正在执行的任务数）</p><p>2）任务由于是放在内存中执行的，可能会丢失</p><p>虽然可以人工从数据库捞出来再重试，但是需要额外开发（比如定时任务），这种重试的场景是非常典型的，其实是不需要我们开发者过于关心，或者自己实现的</p><p>解决方案：把任务放在一个可以持久化存储的硬盘</p><p>3）优化：如果系统的功能越来越多，长耗时任务越来越多，系统越来越复杂（比如要开多个线程池、资源可能会出现相互抢占）</p><p>服务拆分（应用解耦）：其实我们可以把长耗时、消耗很多资源的任务抽出来把它单独抽成一个程序，不影响主业务</p><p>解决方案：可以有一个中间人，让中间人帮我们去连接两个系统（比如核心系统和智能生成业务）</p><p>分布式消息队列</p><p>中间件（连接多个系统，帮助多个系统紧密协作的技术&#x2F;组件）</p><p>Redis、消息队列、分布式存储Etcd</p><p>消息队列</p><p>存放消息的队列</p><p>队列的特点：先进先出</p><p>关键词：存储、消息、队列</p><p>存储：存数据</p><p>消息：某种数据结构，比如字符串、对象、二进制数据、json等等</p><p>队列：先进先出的数据结构</p><p>消息队列是特殊的数据库么？</p><p>可以这么理解</p><p>应用场景（作用）：在多个不同的系统、应用之间实现消息的传输（也可以存储），不需要考虑传输应用的编程语言、系统、框架等等</p><p>可以让java开发的应用发消息，让php开发的应用收消息，这样就不用把所有代码写到同一个项目里（应用解耦）</p><p>消息队列的模型</p><p>生产者：Producer，类比快递员，发送消息的人（客户端）</p><p>消费者：Consumer，类比为取快递的人，接受读取消息的人（客户端）</p><p>消息：Message，类比为快递，就是生产者要传输给消费者的数据</p><p>消息队列：Queue，类比为快递柜，存放消息</p><p>为什么不直接传输，要用消息队列？生产者不用关系消费者要不要消费，什么时候消费，只需要把东西给消息队列，工作就算完成</p><p>生产者和消费者实现了解耦，互不影响</p><p>为什么要用消息队列</p><p>1）异步处理</p><p>生产者发送完消息之后，就可以继续去忙别的，消费者想什么时候消费都可以，不会产生阻塞</p><p>2）消峰填谷</p><p>先把用户的请求放到消息队列中，消费者（实际执行操作的应用）可以按照自己的需求，慢慢去取</p><p>原本：12点时来了10万个请求，原本情况下，10万个请求都在系统内部立刻处理，很快系统压力过大就宕机了</p><p>现在：把这10万个请求都放到消息队列中，处理系统以自己的恒定速率（比如每秒1个）慢慢执行，从而保护系统、稳定处理</p><p>分布式消息队列的优势</p><p>1）.数据持久化：它可以把消息集中存储到硬盘里，服务器重启就不会丢失</p><p>2）.可拓展性：可以根据需求，随时增加（或减少）节点，继续保持稳定的服务</p><p>3）.应用解耦：可以连接各个不同语言、框架开发的系统，让这些系统能够灵活的传输读取数据</p><p>应用解耦的优点：</p><p>​以前，把所有功能都放到同一个项目中，调用多个子功能时，一个环节错，系统就整体出错</p><p>使用消息队列进行解耦：</p><p>​1.一个系统挂了，不影响另外一个系统</p><p>​2.系统挂了并恢复后，仍然可以取出消息，继续执行业务逻辑</p><p>​3.只要发送消息到队列，就可以立刻返回，不用同步调用所有系统，性能更高</p><p>4）.发布订阅：</p><p>如果一个非常大的系统要给其他子系统发送通知，最简单直接的方式是大系统直接一次调用小系统</p><p>​问题：</p><p>​1.每次发通知都要调用很多系统，很麻烦，有可能失败</p><p>​2.新出现的项目（或者说大项目感知不到的项目）无法得到通知</p><p>​解决方案：大的核心系统始终王一个地方（消息队列）去发送消息，其他的系统都去订阅这个消息队列（读取整个消息队列中的消息）</p><p>应用场景</p><p>1.耗时的场景（异步）</p><p>2.高并发场景（异步、削峰填谷）</p><p>3.分布式系统协作（尤其是跨团队、跨业务协作，应用解耦）</p><p>4.强稳定性的场景（比如金融业务，持久化、可靠性、削峰填谷）</p><p>消息队列的缺点</p><p>要给系统引入额外的中间件，系统会更复杂、额外维护中间件、额外的费用（部署）成本</p><p>消息队列：消息丢失、顺序性、重复消费、数据的一致性（分布式系统就要考虑）</p><p>​（分布式场景下需要考虑的问题）</p><p>主流分布式消息队列选型</p><p>主流技术</p><p>1.activemq</p><p>2.rabbitmq</p><p>3.kafka</p><p>4.rocketmq</p><p>5.zeromq</p><p>6.pulsar</p><p>7.Apache Inlong（Tube）</p><p>技术对比</p><p>技术选型指标：</p><p>​吞吐量：IO、并发</p><p>​时效性：类似延迟，消息的发送，到达时间</p><p>​可用性：系统可用的比率（比如一年365天宕机1s）</p><p>​可靠性：消息不丢失，功能正常完成</p><table><thead><tr><th>技术名称</th><th>吞吐量</th><th>时效性</th><th>可用性</th><th>可靠性</th><th>优势</th><th>应用场景</th></tr></thead><tbody><tr><td>activemq</td><td>万级</td><td>高</td><td>高</td><td>高</td><td>简单易学</td><td>中小型企业、项目</td></tr><tr><td>rabbitmq</td><td>万级</td><td><strong>极高（微秒级别）</strong></td><td>高</td><td>高</td><td>生态好、时效性高、易学</td><td>绝大多数分布式的应用</td></tr><tr><td>kafka</td><td><strong>10万级</strong></td><td>高（毫秒级别）</td><td>极高</td><td>极高</td><td>吞吐量大、可靠性、可用性、可拓展性很高，强大的数据流能力</td><td>适用于大规模处理数据的场景，比如构建日志收集系统，实时数据流传输、事件流收集传输</td></tr><tr><td>rocketmq</td><td>10万级</td><td>高（ms）</td><td>极高</td><td>极高</td><td>吞吐量大、可靠性、可用性、可拓展性</td><td>适用于金融、电商等对可靠性要求较高的场景，适合大规模的消息处理</td></tr><tr><td>pulsar</td><td>10万级</td><td>高（ms）</td><td>极高</td><td>极高</td><td>可靠性、可用性、基于发布订阅模型，新兴（技术架构先进）</td><td>适合大规模、高并发的分布式系统（云原生），适合实时分析、事件流处理、IoT数据处理等</td></tr></tbody></table><p>RabbitMQ入门实战</p><p>特点：生态好，好学习，易于理解，时效性强，支持很多不同语言的客户端，拓展性，可用性都很不错</p><p>学习性价比非常高的消息队列，适用于绝大多数中小规模分布式系统</p><p>官方文档：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p>基本概念</p><p>AMQP协议：<a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html">https://www.rabbitmq.com/tutorials/amqp-concepts.html</a></p><p>高级消息队列协议（Advanced Message Queue Protocol）</p><p>生产者：发消息到某个交换机</p><p>消费者：从某个队列中取消息</p><p>交换机（Exchange）：负责把消息<strong>转发</strong>到对应的队列</p><p>队列（Queue）：存储消息的</p><p>路由（Routes）：转发，就是把消息从一个地方转到另外一个地方（比如从生产者转发到某个队列）</p><p>安装：<a href="https://www.rabbitmq.com/install-windows.html">https://www.rabbitmq.com/install-windows.html</a></p><p>先安装erlang（因为RabbitMQ依赖erlang），性能非常高：<a href="https://www.erlang.org/patches/otp-25.3.2">https://www.erlang.org/patches/otp-25.3.2</a></p><p>服务菜单显示正在运行，即安装成功</p><p>想要远程访问rabbitmq管理面板，需要自己创建一个管理员密码，否则会被拦截</p><p>快速入门：</p><p>MQ官方教程</p><h3 id="单向发送"><a href="#单向发送" class="headerlink" title="单向发送"></a>单向发送</h3><p>HelloWorld</p><p>引入消息队列Java客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.17.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>生产者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Channel频道：理解为客户端client（比如jdbcClient，redisClient），提供了和消息队列server建立通信的传输方法（为了复用连接，提高传输效率），程序通过channel操作rabbitmq（比如收发消息）</p><p>创建消息队列：</p><p>参数：</p><p>queueName：消息队列名称（注意：同名称的消息队列，只能用同样的参数创造一次）</p><p>durable：消息队列重启后，消息是否丢失</p><p>exclusive：是否只允许当前这个创建消息队列的连接操作消息队列</p><p>autoDelete：没有人用队列后，是否要删除队列</p><p>消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recv</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动消费者后，可以看到消息被消费了</p><h3 id="多消费者"><a href="#多消费者" class="headerlink" title="多消费者"></a>多消费者</h3><p>场景：一个生产者给一个队列发消息，<strong>多个消费者</strong>从这个队列去消息，1对多</p><p>多个机器同时去接受并处理任务（尤其是每个机器的处理能力有限）</p><p>1）队列持久化<br>durable参数设置为true，服务器重启后队列不丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>2）消息持久化</p><p>指定MessageProperties.PERSISTENT_TEXT_PLAIN参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">                       MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">                       message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p>生产者代码（使用scanner方便测试）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">                 <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">                channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                    channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">                            MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">                            message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制单个消费者的处理任务积压数</p><p>每个消费者最多同时处理一个任务数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>消费确认机制：为了保证消息成功被消费（快递被成功取走），rabbitmq提供了消息确认机制，当消费者接收到消息后，比如要给一个反馈：</p><p>​ack：消费成功</p><p>​nack：消费失败</p><p>​reject：拒绝</p><p>如果告诉rabbitmq服务器消费成功，服务器才会放心的移除消息</p><p>支持配置autoack，会自动执行ack命令，接收到消息立刻就成功了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure><p>建议autoack改为false，根据实际情况改为手动确认</p><p>指定确认某条消息：</p><p>第二个参数multiple， 批量确认：是指是否要一次性确认所有的历史消息直到当前这条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(),false);</span><br></pre></td></tr></table></figure><p>指定拒绝某些消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);</span><br></pre></td></tr></table></figure><p>第三个参数标识是否重新入队，可用于重试</p><p>消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//定义如何处理消息</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">finali</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//处理工作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span>  + <span class="string">&quot;编号&quot;</span> + finali + <span class="string">&quot;:&quot;</span>+ message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="comment">//停20s，模拟机器处理能力有限</span></span><br><span class="line">                    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//开启消费监听</span></span><br><span class="line">            channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小技巧：</p><p>​1.使用Scannner接受用户输入，便于快速发送多条消息</p><p>​2.使用for循环创建多个消费者，便于快速验证队列模型工作机制</p><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p>场景：多个机器同时去接受并处理任务（尤其是每个机器的处理能力有限）</p><p>一个生产者给<strong>多个队列</strong>发送消息，<strong>多个消费者</strong>从这个队列取消息</p><p>交换机的作用：类似于网络路由器，提供转发功能。</p><p>要解决的问题：怎么把消息转发到不同的队列上，好让消费者从不同的队列消费</p><p>绑定：交换机和队列关联起来，也可以叫路由，算是一个算法或者转发策略</p><p>绑定代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, &quot;绑定规则&quot;);</span><br></pre></td></tr></table></figure><p>交换机的类别：direct 、 topic 、 headers and fanout</p><p>fanout交换机：扇出，广播</p><p>场景：很适用于发布订阅的场景，比如写日志，可以多个系统间共享</p><p>特点：消息会被转发到所有绑定到该交换机的队列</p><p>生产者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        <span class="comment">//创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码</p><p>注意，</p><p>​1.消费者和生产者要绑定同一个交换机</p><p>​2。要先有队列才能绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConsumer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel2</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">    <span class="comment">//创建队列，随机分配一个队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">    channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;queue2&quot;</span>;</span><br><span class="line">    channel2.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    channel2.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [1] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot; [2] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    channel2.basicConsume(queueName2, <span class="literal">true</span>, deliverCallback2, consumerTag -&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：所有的消费者都能收到消息</p><h2 id="6-18"><a href="#6-18" class="headerlink" title="6.18"></a>6.18</h2><p>Direct交换机</p><p>绑定：可以让交换机和队列进行关联，可以指定让交换机把什么样的消息发送给哪个队列（类似于计算机网络中两个路由器，或者网络设备相互连接，也可以理解为网线）</p><p>routingKey：路由键，控制消息要转发给哪个队列（IP地址），可以绑定同样的路由键</p><p>特点：消息会根据路由键转发给指定的队列</p><p>场景：特定的消息只交给特定的系统（程序）来处理</p><p>绑定关系：完全匹配路由键</p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.springbootinit.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(strings.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Sent to&#x27;&quot;</span> + routingKey + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.springbootinit.mq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;queue1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;queue2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [1] Received &#x27;&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [2] Received &#x27;&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.basicConsume(queueName2, <span class="literal">true</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="topic交换机"><a href="#topic交换机" class="headerlink" title="topic交换机"></a>topic交换机</h3><p>特点：消息会根据一个<strong>模糊的</strong>路由键转发到特定的队列</p><p>场景：特定的一类消息可以交给特定的一类系统（程序）来处理</p><p>绑定关系：可以模糊匹配多个绑定</p><ul><li>*：匹配一个单词，比如 *.orange ，那么a.orange、b.orange都能匹配</li><li>#：匹配0个或多个单词，比如a.#，那么a.a，a.b，a.a.a都能匹配</li></ul><p>注意，这里的匹配和MySQL的like和%不一样，只能按照单词来匹配，每个’.’分隔单词，如果是’#.’，那么可以忽略，匹配0个单词也ok</p><p>生产者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.springbootinit.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent to&#x27;&quot;</span> + routingKey + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.springbootinit.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建队列，随机分配一个队列名称</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;frontend_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;#.前端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;backend_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;#.后端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName3</span> <span class="operator">=</span> <span class="string">&quot;product_queue&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName3, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName3, EXCHANGE_NAME, <span class="string">&quot;#.产品.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [A] Received &#x27;&quot;</span> +</span><br><span class="line">            delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback1, consumerTag -&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot; [B] Received &#x27;&quot;</span> +</span><br><span class="line">              delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queueName2, <span class="literal">true</span>, deliverCallback2, consumerTag -&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback3</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot; [C] Received &#x27;&quot;</span> +</span><br><span class="line">              delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queueName3, <span class="literal">true</span>, deliverCallback3, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>支持用消息队列来模拟RPC的调用，但是一般没必要，直接用Dubbo、GRPC等RPC框架就好了</p><p>实现一个场景总有更合适的、更专注的技术</p><h3 id="Headers交换机"><a href="#Headers交换机" class="headerlink" title="Headers交换机"></a>Headers交换机</h3><p>类似主题和直接交换机，可以根据headers中的内容来指定发送到哪个队列（由于性能差，比较复杂，一般不推荐使用）</p><h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><h3 id="消息过期机制"><a href="#消息过期机制" class="headerlink" title="消息过期机制"></a>消息过期机制</h3><p>官方文档：<a href="https://www.rabbitmq.com/ttl.html">https://www.rabbitmq.com/ttl.html</a></p><p>可以给每条消息指定一个有效期，一段时间内未被消费者处理，就过期了</p><p>示例场景：消费者（库存系统）挂了，一个订单15分钟还没被库存系统处理，这个订单其实已经失效了，哪怕库存系统再回复，其实也不用扣库存</p><p>适用场景：清理过期队列、模拟延迟队列的实现、专门让某个程序处理过期请求</p><p>1）给队列中的消息指定过期时间</p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.springbootinit.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//创建队列，指定消息过期参数</span></span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="comment">//args指定参数</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">        <span class="comment">//定义了如何处理消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消费消息，会持续阻塞</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果再过期时间内，还没有消费者取消息，消息才会过期</p><p>注意，如果消息已经接受了，但是没确认，是不会过期的</p><p>如果消息处于待消费状态并且过期时间到达后，消费会被标记为过期。但是如果消息已经被消费者消费，并且再处理过程中，即使过期时间到达，消息仍然会被正常处理</p><p>2）给某条消息指定过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">            <span class="comment">//给消息指定过期时间</span></span><br><span class="line">            AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">                    .expiration(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h3><p>官方文档：<a href="https://www.rabbitmq.com/confirms.html">https://www.rabbitmq.com/confirms.html</a></p><p>上文以阐述过，在第二个交换机模型中</p><p>一般情况下autoack改为false</p><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><p>官方文档：<a href="https://www.rabbitmq.com/dlx.html">https://www.rabbitmq.com/dlx.html</a></p><p>为了保证消息的可靠性，比如每条消息都成功消费，需要提供一个容错机制，即：失败的消息怎么处理？</p><p>死信：过期的消息、拒收的消息、消息队列满了、处理失败的消息的统称</p><p>死信队列：专门处理死信的队列（注意，就是一个普通的队列，只不过是专门用来处理死信的，甚至可以理解这个队列的名称叫“死信队列”）</p><p>死信交换机：专门给死信队列转发消息的交换机（注意，就是一个普通的交换机，只不过是专门给死信队列发消息而已，理解为这个交换机的名称就叫“死信交换机”），也存在路由绑定关系</p><p>死信可以提供死信交换机绑定到死信队列</p><p>实现：</p><p>​1.创建死信交换机和死信队列，并且绑定关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明死信交换机</span></span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明死信队列</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;A_dlx_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;B_dlx_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;B&quot;</span>);</span><br></pre></td></tr></table></figure><p>​2.给失败之后需要容错处理的队列绑定死信交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; args2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列，随机分配一个队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;queueA&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args2);</span><br><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;queueA&quot;</span>);</span><br></pre></td></tr></table></figure><p>​3.可以给要容错的队列指定死信之后的转发规则，死信应该再转发到哪个死信队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定死信要转发到哪个死信队列</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br></pre></td></tr></table></figure><p>​4.可以通过程序来读取死信队列中的消息，从而进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建队列，随机分配一个队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;queueA&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args2);</span><br><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;queueA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;queueB&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;queueB&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//拒绝消息</span></span><br><span class="line">channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">System.out.println(<span class="string">&quot; [1] Received &#x27;&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot; [2] Received &#x27;&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">channel.basicConsume(queueName, <span class="literal">false</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line"> channel.basicConsume(queueName2, <span class="literal">false</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.springbootinit.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx_direct_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct2_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">//声明死信交换机</span></span><br><span class="line">            channel.exchangeDeclare(DEAD_EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//声明死信队列</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;A_dlx_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName, DEAD_EXCHANGE_NAME, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;B_dlx_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName2, DEAD_EXCHANGE_NAME, <span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(strings.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Sent to&#x27;&quot;</span> + routingKey + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.springbootinit.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx_direct_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct2_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">//指定死信队列参数</span></span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        <span class="comment">//要绑定到哪个交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">        <span class="comment">//指定死信要转发到哪个死信队列</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; args2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        args2.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">        args2.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建队列，随机分配一个队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;queueA&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args2);</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;queueA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;queueB&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">        channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;queueB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">//拒绝消息</span></span><br><span class="line">            channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [1] Received &#x27;&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [2] Received &#x27;&quot;</span> + delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">false</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.basicConsume(queueName2, <span class="literal">false</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RabbitMQ的重要特性（面试考点）"><a href="#RabbitMQ的重要特性（面试考点）" class="headerlink" title="RabbitMQ的重要特性（面试考点）"></a>RabbitMQ的重要特性（面试考点）</h2><p>1.消息队列的概念、模型、应用场景</p><p>2.交换机的类别、路由绑定的关系</p><p>3.消息可靠性</p><p>​a.消息确认机制（ack、nack、reject）</p><p>​b.消息持久化（durable）</p><p>​c.消息过期机制</p><p>​d.死信队列</p><p>4.延迟队列（类似死信队列）</p><p>5.顺序消费、消费幂等性</p><p>6.可拓展性（了解）</p><p>​a.集群</p><p>​b.故障的恢复机制</p><p>​c.镜像</p><p>7.运维监控告警（仅作了解）</p><h2 id="RabbitMQ项目实战"><a href="#RabbitMQ项目实战" class="headerlink" title="RabbitMQ项目实战"></a>RabbitMQ项目实战</h2><h3 id="选择客户端"><a href="#选择客户端" class="headerlink" title="选择客户端"></a>选择客户端</h3><p>怎么再项目中使用RabbitMQ？</p><p>​1.使用官方的客户端（优点：兼容性好，换语言成本低，比较灵活；缺点：太灵活，要自己去处理一些事情，比如要自己维护管理链接）</p><p>​2.使用封装好的客户端，比如Spring Boot RabbitMQ Starter（优点：简单易用，直接配置直接用；缺点：有一定的学习门槛，不够灵活，被框架限制）</p><p>根据场景来选择，没有绝对的优劣</p><p>本次使用第二种方法</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>注意，使用的版本一定要和项目中的springboot版本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在yml中引入配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spirng:</span><br><span class="line">rabbitmq:</span><br><span class="line">   host: localhost</span><br><span class="line">   post: 5672</span><br><span class="line">   password: guest</span><br><span class="line">   username: guest</span><br></pre></td></tr></table></figure><p>首次启动，创建交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建测试程序用到的交换机和队列（只需要执行一次）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqInitMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_exchange&quot;</span>;</span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建队列，随机分配一个队列名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;code_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;my_routingKey&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入生产者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String exchange, String routingKey, String message)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &#123;&#125;, ackMode = &quot;MANUAL&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> deliverTag)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;receiveMessage message = &#123;&#125;&quot;</span>, message);</span><br><span class="line">        channel.basicAck(deliverTag, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMessageProducerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyMessageProducer myMessageProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        myMessageProducer.sendMessage(<span class="string">&quot;code_exchange&quot;</span>, <span class="string">&quot;my_routingKey&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BI项目改造"><a href="#BI项目改造" class="headerlink" title="BI项目改造"></a>BI项目改造</h2><p>以前是任务提交到线程池，然后子啊线程池提交编写处理程序的代码，线程池内排队</p><p>如果程序中断了，任务就没了，就丢了</p><p>改造后的流程：</p><p>​1.把任务提交改为向队列发送消息</p><p>​2.写一个专门的接收消息的程序，处理任务</p><p>​3.如果程序中断了，消息未被确认，还会重发</p><p>​4.现在，消息全部集中到消息队列，可以部署多个后端，都从同一个地方取任务，从而实现分布式，负载均衡</p><p>验证发现，如果程序中断了，没有ack，也没有nack（服务中断，没有任何响应），那么这个消息会被重新放到消息队列中，从而实现了每个任务都会执行</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java开发 Bi分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构学习（1）</title>
      <link href="/wang666-bot.github.io/post/35f3077d.html"/>
      <url>/wang666-bot.github.io/post/35f3077d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p><strong>时间复杂度</strong></p><p>分析每个步骤的常数时间操作，再分析复杂度</p><p>确定算法流程的总操作数量与样本数量之间的表达式关系</p><p>最高阶项就是最后的复杂度</p><p><strong>额外空间复杂度</strong></p><p>实现算法流程，需要开辟一些空间来支持</p><p>作为输入参数、输出结果的空间，不算额外空间</p><p>初此之外所需要的空间是额外空间</p><p><strong>评估算法的核心</strong></p><p>时间复杂度</p><p>额外空间复杂度</p><p>常数项时间</p><p><strong>常数项的估计放弃理论计算，直接使用大样本数据进行比较</strong></p><p><strong>最优解：时间复杂度尽可能低的前提下，空间复杂度尽量低</strong></p><p>复杂度排序： O(1)    O(logN)   O(N)   O(N*logN)    O(N^2)   O(N^3) …O(N^k)  O(2^N) … O(k^N)   O(N!)</p><h2 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h2><p>没有oj的题目，首先想出一个最差的方法，使用随机数据，再思考最优解，进行大样本随机数据测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateRandomArray(<span class="type">int</span> maxSize, <span class="type">int</span> maxValue) &#123;</span><br><span class="line"><span class="comment">// Math.random()   [0,1)  </span></span><br><span class="line"><span class="comment">// Math.random() * N  [0,N)</span></span><br><span class="line"><span class="comment">// (int)(Math.random() * N)  [0, N-1]</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[(<span class="type">int</span>) ((maxSize + <span class="number">1</span>) * Math.random())];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">// [-? , +?]</span></span><br><span class="line">arr[i] = (<span class="type">int</span>) ((maxValue + <span class="number">1</span>) * Math.random()) - (<span class="type">int</span>) (maxValue * Math.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分法-O-logN"><a href="#二分法-O-logN" class="headerlink" title="二分法 O(logN)"></a><strong>二分法</strong> O(logN)</h2><p>1）有序数组，找某个数是否存在，每次看中间的数和所要寻找的数，比较大小，往左继续或者往右继续</p><p>2）在一个有序数组中，找&gt;&#x3D;某个数最左侧的位置</p><p>3）在一个有序数组中，找&lt;&#x3D;某个数最右侧的位置</p><p>4）局部最小值问题，先判断边界条件，然后再判断中点，判断，不成立继续接着二分</p><p>二分法要注意 L &lt;&#x3D; R 至少一个数 或者 L &lt; R 至少俩个数</p><p>会导致不同的边界条件</p><h2 id="位运算-异或运算"><a href="#位运算-异或运算" class="headerlink" title="位运算 异或运算"></a><strong>位运算 异或运算</strong></h2><p>异或运算可看作无进位相加</p><p>0 ^ N &#x3D; N</p><p>N ^ N &#x3D; 0</p><p>a ^ b &#x3D; b ^ a</p><p>(a ^ b) ^ c &#x3D; a ^ (b ^ c)</p><p>题目：如何不用额外的变量交换两个数（不是同一个内存区域）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><p>题目：数组只有一种数出现了奇数次，其他都是偶数次，找到并打印这个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>；</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">eor ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(eor);</span><br></pre></td></tr></table></figure><p>题目：提出一个数最右侧的1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &amp; (-a)  <span class="comment">///-a = ~a + 1</span></span><br></pre></td></tr></table></figure><p>题目：一个数组中有两种数出现了奇数次，其他都是偶数次，找到这两个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>；</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">eor ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//eor = a ^ b</span></span><br><span class="line"><span class="comment">//a != b,</span></span><br><span class="line"><span class="comment">//找出最右侧的1，即a和b不同的一个地方，进行分类</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rightOne</span> <span class="operator">=</span> eor ^ (-eor);</span><br><span class="line"><span class="type">int</span> <span class="variable">onlyOne</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((arr[i] &amp; rightOne ) != <span class="number">0</span>)&#123;</span><br><span class="line">onlyOne ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(onlyOne + <span class="string">&quot;,&quot;</span> + (onlyOnr ^ eor));</span><br></pre></td></tr></table></figure><p>题目：一个数组中有一种数出现了k次，其他数都是M次， M &gt; 1, K &lt; M, 找到出现了K次的数，额外空间复杂度O(1)，时间复杂度O(N)</p><p>int 转为数组形式的二进制状态</p><p>每个数出现，就在数组中标计，+1</p><p>最后数组中每一位上的数 i 都是由出现了M次和K次的数构成，i % M &#x3D;&#x3D; 0 ? 不为0则有出现了K次的数，即出现了K次的数在该位置上是1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arr中只有一种数出现了K次，其他数都出现了M次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">onlyKTimes</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">31</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//if((num &gt;&gt; i) &amp; 1 != 0)&#123;</span></span><br><span class="line">            <span class="comment">//    count[i]++;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            count[i] += (num &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">31</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count[i] % m != <span class="number">0</span>)&#123;</span><br><span class="line">            ans |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对数器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line"><span class="keyword">if</span>(map.containsKey(num))&#123;</span><br><span class="line">map.put(num, map.get(num) + <span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">map.put(num, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num : map.keySet())&#123;</span><br><span class="line"><span class="keyword">if</span>(map.get(num) == k)&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：如果其他的数都出现了M次，最后剩余的数没出现K次，返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arr中只有一种数出现了K次，其他数都出现了M次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">onlyKTimes</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">31</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//if((num &gt;&gt; i) &amp; 1 != 0)&#123;</span></span><br><span class="line">            <span class="comment">//    count[i]++;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            count[i] += (num &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">31</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count[i] % m == <span class="number">0</span>)&#123;</span><br><span class="line">        coutinue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count[i] % m == k)&#123;</span><br><span class="line">            ans |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//边界条件：0 要单独判断！</span></span><br><span class="line">    <span class="keyword">if</span>(ans == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> count == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count != k)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="认识一些基础的数据结构"><a href="#认识一些基础的数据结构" class="headerlink" title="认识一些基础的数据结构"></a>认识一些基础的数据结构</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><strong>单向链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单向链表节点结构（可以实现成范型）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span> T value;</span><br><span class="line"><span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双向链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双向链表结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span> DoubleNode last;</span><br><span class="line"><span class="keyword">public</span> DoubleNode next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DoubleNode</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表相关的问题几乎都是coding问题</p><p>1）实现链表的反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DoubleNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span> DoubleNode last;</span><br><span class="line"><span class="keyword">public</span> DoubleNode next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DoubleNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  head</span></span><br><span class="line"><span class="comment">//   a    -&gt;   b    -&gt;  c  -&gt;  null</span></span><br><span class="line"><span class="comment">//   c    -&gt;   b    -&gt;  a  -&gt;  null</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">reverseLinkedList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">next = head.next;</span><br><span class="line">head.next = pre;</span><br><span class="line">pre = head;</span><br><span class="line">head = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> DoubleNode <span class="title function_">reverseDoubleList</span><span class="params">(DoubleNode head)</span> &#123;</span><br><span class="line"><span class="type">DoubleNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">DoubleNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">next = head.next;</span><br><span class="line">head.next = pre;</span><br><span class="line">head.last = next;</span><br><span class="line">pre = head;</span><br><span class="line">head = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）把定值给删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// head = removeValue(head, 2);</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">removeValue</span><span class="params">(Node head, <span class="type">int</span> num)</span> &#123;</span><br><span class="line"><span class="comment">// head来到第一个不需要删的位置</span></span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (head.value != num) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">head = head.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 ) head == null</span></span><br><span class="line"><span class="comment">// 2 ) head != null</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur.value == num) &#123;</span><br><span class="line">pre.next = cur.next;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pre = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><p>实现：使用双向链表和数组实现栈和队列</p><p>​双向链表实现队列</p><p>​双向链表实现双端队列</p><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">public</span> T value;</span><br><span class="line"><span class="keyword">public</span> Node&lt;T&gt; last;</span><br><span class="line"><span class="keyword">public</span> Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123;</span><br><span class="line">value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DoubleEndsQueue</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">public</span> Node&lt;T&gt; head;</span><br><span class="line"><span class="keyword">public</span> Node&lt;T&gt; tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFromHead</span><span class="params">(T value)</span> &#123;</span><br><span class="line">Node&lt;T&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;T&gt;(value);</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">head = cur;</span><br><span class="line">tail = cur;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cur.next = head;</span><br><span class="line">head.last = cur;</span><br><span class="line">head = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFromBottom</span><span class="params">(T value)</span> &#123;</span><br><span class="line">Node&lt;T&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;T&gt;(value);</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">head = cur;</span><br><span class="line">tail = cur;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cur.last = tail;</span><br><span class="line">tail.next = cur;</span><br><span class="line">tail = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">popFromHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;T&gt; cur = head;</span><br><span class="line"><span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">head = <span class="literal">null</span>;</span><br><span class="line">tail = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">cur.next = <span class="literal">null</span>;</span><br><span class="line">head.last = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">popFromBottom</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;T&gt; cur = tail;</span><br><span class="line"><span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">head = <span class="literal">null</span>;</span><br><span class="line">tail = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tail = tail.last;</span><br><span class="line">tail.next = <span class="literal">null</span>;</span><br><span class="line">cur.last = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> DoubleEndsQueue&lt;T&gt; queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">queue = <span class="keyword">new</span> <span class="title class_">DoubleEndsQueue</span>&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T value)</span> &#123;</span><br><span class="line">queue.addFromHead(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> queue.popFromHead();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> DoubleEndsQueue&lt;T&gt; queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">queue = <span class="keyword">new</span> <span class="title class_">DoubleEndsQueue</span>&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T value)</span> &#123;</span><br><span class="line">queue.addFromHead(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> queue.popFromBottom();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*数组生成队列和栈</p><p>​实现栈：用一个变量index指向新进来的数指向的位置</p><p>​<strong>实现队列</strong>：垃圾的实现方法：一个变量begin指向拿数的位置，一个变量end指向加数的位置（追赶的感觉）</p><p>​三个变量：一个变量begin指向拿数的位置，一个变量end指向加数的位置，一个变量size调节能否加数取数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pushi;<span class="comment">// end</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> polli;<span class="comment">// begin</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> limit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">(<span class="type">int</span> limit)</span> &#123;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[limit];</span><br><span class="line">pushi = <span class="number">0</span>;</span><br><span class="line">polli = <span class="number">0</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">this</span>.limit = limit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (size == limit) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列满了，不能再加了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">arr[pushi] = value;</span><br><span class="line">pushi = nextIndex(pushi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空了，不能再拿了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">size--;</span><br><span class="line"><span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> arr[polli];</span><br><span class="line">polli = nextIndex(polli);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果现在的下标是i，返回下一个位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i &lt; limit - <span class="number">1</span> ? i + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>栈和队列的常见面试题</strong></p><p>1.实现一个特殊的栈，在基本功能的基础上，再实现返回栈中最小元素的功能</p><p>1）pop、push、getMin操作的时间复杂度都是O(1)</p><p>2）设计的栈类型可以使用现成的栈结构</p><p>思路：设计一个min栈，min栈和栈同步压入，每一步都得出最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyStack1</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Stack&lt;Integer&gt; stackData;</span><br><span class="line"><span class="keyword">private</span> Stack&lt;Integer&gt; stackMin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyStack1</span><span class="params">()</span> &#123;</span><br><span class="line">stackData = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">stackMin = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> newNum)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stackMin.isEmpty() || newNum &lt;= <span class="built_in">this</span>.getmin()) &#123;</span><br><span class="line">stackMin.push(newNum);</span><br><span class="line">&#125;</span><br><span class="line">stackData.push(newNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stackData.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Your stack is empty.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stackData.pop();</span><br><span class="line"><span class="keyword">if</span> (value == getmin()) &#123;</span><br><span class="line">stackMin.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getmin</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stackMin.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Your stack is empty.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stackMin.peek();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyStack2</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Stack&lt;Integer&gt; stackData;</span><br><span class="line"><span class="keyword">private</span> Stack&lt;Integer&gt; stackMin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyStack2</span><span class="params">()</span> &#123;</span><br><span class="line">stackData = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">stackMin = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> newNum)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stackMin.isEmpty() || newNum &lt; getmin()) &#123;</span><br><span class="line">stackMin.push(newNum);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">stackMin.push(stackMin.peek());</span><br><span class="line">&#125;</span><br><span class="line">stackData.push(newNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stackData.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Your stack is empty.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">stackMin.pop();</span><br><span class="line"><span class="keyword">return</span> stackData.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getmin</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stackMin.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Your stack is empty.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stackMin.peek();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.栈结构实现队列结构</p><p>一个push栈，一个pop栈，数进入push栈，再导入pop栈</p><p>倒数据</p><p>1）一次性倒完</p><p>2）pop栈空了才能导入pop栈</p><p>3.队列结构实现栈结构</p><p>两个队列，来回倒</p><p>加数直接加，弹出的时候把一个队列的所有-1都给另一个数，然后交换队列</p><p>图的宽度优先遍历（队列实现），深度优先遍历（栈实现）</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>任何递归都可以改成非递归</p><p>例题：得出数组arr， L到R范围上的最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 求arr中的最大值</span><br><span class="line">public static int getMax(int[] arr) &#123;</span><br><span class="line">return process(arr, 0, arr.length - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// arr[L..R]范围上求最大值  L ... R   N</span><br><span class="line">public static int process(int[] arr, int L, int R) &#123;</span><br><span class="line">// arr[L..R]范围上只有一个数，直接返回，base case</span><br><span class="line">if (L == R) &#123; </span><br><span class="line">return arr[L];</span><br><span class="line">&#125;</span><br><span class="line">// L...R 不只一个数</span><br><span class="line">// mid = (L + R) / 2</span><br><span class="line">int mid = L + ((R - L) &gt;&gt; 1); // 中点   1</span><br><span class="line">int leftMax = process(arr, L, mid);</span><br><span class="line">int rightMax = process(arr, mid + 1, R);</span><br><span class="line">return Math.max(leftMax, rightMax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度计算公式-Master公式"><a href="#复杂度计算公式-Master公式" class="headerlink" title="复杂度计算公式  Master公式"></a>复杂度计算公式  Master公式</h2><p>形如</p><p>T(N) &#x3D; a * T(N&#x2F;b) + O(N^d)(其中的a、b、d都是常数)</p><p>的递归函数，可以直接通过Master公式来确定时间复杂度</p><p>如果 log(b,a) &lt; d，复杂度为O(N^d)</p><p>如果 log(b,a) &gt; d，复杂度为O(N^log(b,a))</p><p>如果 log(b,a) &#x3D;&#x3D; d，复杂度为O(N^d * logN)</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>增删改查常数时间</p><p>非基础类型拷贝在哈希表内只会拷贝地址</p><p>&#x3D;&#x3D;是引用传递，而在哈希表中是值传递，原生类型在哈希表中都是值传递，非原生类型是引用传递</p><h2 id="有序表-TreeMap"><a href="#有序表-TreeMap" class="headerlink" title="有序表 TreeMap"></a>有序表 TreeMap</h2><p>实现：红黑树 avl sb树 跳表</p><p>增删改查 O(logN)</p><p>原生数据按值传递，并且按key大小排序存储</p><p>非原生数据需要指定比较器</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><strong>选择排序</strong> O(N^2)</p><p>0 ~ N- 1 找到最小值，放到0位置上</p><p>1 ~ N- 1找到最小值， 放到1位置上</p><p>。。。。。</p><p><strong>冒泡排序</strong> O(N^2)</p><p>0 和 1位置 谁大谁往后  1 和 2 位置 谁大谁往后 …..  N - 1 和 N谁大谁往后 ，确定N 位置</p><p>0 和 1位置 谁大谁往后  1 和 2 位置 谁大谁往后 …..  N - 2 和 N  -1谁大谁往后 ，确定N - 1 位置</p><p>.。。。。。</p><p><strong>插入排序</strong> O(N^2)</p><p>0 ~ 0 有序</p><p>观察1位置数，保证0 ~ 1 有序</p><p>观察2位置数，保证0~2 有序</p><p>。。。。。</p><p>0 ~ N 有序</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 算法与数据结构 Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/wang666-bot.github.io/post/364ea8cc.html"/>
      <url>/wang666-bot.github.io/post/364ea8cc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>是前辈们对代码开发经验的总结，是解决特定问题的一系列套路（面向对象）</p><p>本质：面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解</p><h2 id="设计原则（7）"><a href="#设计原则（7）" class="headerlink" title="设计原则（7）"></a>设计原则（7）</h2><p>1.单一职责原则：最简单的面向对象设计原则，用于控制类的粒度大小（一个对象应该只包含一个单一的职责，并且该职责被完整的封装在一个类中）</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人为一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*编程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">    Systenm.out.println(<span class="string">&quot;编程&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *送外卖</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFood</span><span class="params">()</span>&#123;</span><br><span class="line">        Systenm.out.println(<span class="string">&quot;送外卖&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *打螺丝</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFood</span><span class="params">()</span>&#123;</span><br><span class="line">        Systenm.out.println(<span class="string">&quot;打螺丝&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个People类太过臃肿，当修改任意一个方法的时候，都需要修改People类，根据单一职责原则，需要进行更明确的划分，同种类型的操作放到一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*编程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">    Systenm.out.println(<span class="string">&quot;编程&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sender</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *送外卖</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFood</span><span class="params">()</span>&#123;</span><br><span class="line">        Systenm.out.println(<span class="string">&quot;送外卖&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *打螺丝</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFood</span><span class="params">()</span>&#123;</span><br><span class="line">        Systenm.out.println(<span class="string">&quot;打螺丝&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将类的粒度进行更近一步的划分，以后在设计Mapper、Service、Controller等，需要根据不同的业务进行划分，都可以采用单一职责原则，以实现<em><strong>高内聚低耦合</strong></em>，微服务也是参考了单一职责原则，每个微服务只应担负一个职责</p><p>PS：高内聚低耦合是软件工程中的一个设计原则，指的是模块内部的元素彼此之间紧密相关，而不同模块之间的耦合性尽可能低，即模块之间相互独立，减少模块间的依赖关系。</p><p>高内聚表示模块内部的功能联系紧密，一个模块内部的各个元素之间相互配合，形成一个整体，能够共同完成一项特定的任务。这有利于提高模块的可读性、可维护性和可复用性，对于单元测试和重构等工作也更加容易。</p><p>低耦合表示模块之间的联系尽可能的少，模块之间的相互影响尽量降到最小。这有利于减少模块之间的依赖关系，提高系统的灵活性和可扩展性，同时也有利于提高软件的可维护性和可复用性。</p><p>2.开闭原则：软件实体应当对扩展开放（提供方），对修改关闭（调用方）</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line"><span class="comment">//对扩展开放</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">System.oun.println(<span class="string">&quot;java是世界上最好的语言&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhpCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">System.oun.println(<span class="string">&quot;php是世界上最好的语言&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CsharpCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">System.oun.println(<span class="string">&quot;c#是世界上最好的语言&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子里，将coding行为抽象为一个统一的抽象类，实现对扩展开放要求，不同的类可以自由决定如何进行coding的实现，不会受到其他人的干涉，满足了对修改关闭</p><p>通过Coder抽象类，定义出编程的行为，但不进行实现，而是开放给其他具体类型的程序员来实现，这样就可以根据不同的业务进行灵活拓展，具有较好的延续性</p><p>3.里氏替换原则：是对子类型的特别定义，所有引用基类的地方必须能够透明地使用其子类的对象，即子类可以拓展父类的功能，但不能改变父类原有的功能：</p><p>​1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</p><p>​2.子类可以增加自己特有的方法</p><p>​3.当子类的方法重载子类的方法时，方法的前置条件（即方法的输入&#x2F;入参）要比父类方法的输入参数更宽松</p><p>​4.当子类的方法实现父类的方法时（重写&#x2F;重载或实现抽象方法），方法的后置条件（即方法的输出&#x2F;返回值），要比父类更严格或与父类一样</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;编程&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *子类除了编程之外，还会其他</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而下述例子就违反了里氏规则，父类的行为被子类覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;编程&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line">       </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于该情况，需要将行为定义到一个更高的类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coder</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;编程&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">       </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.依赖倒转原则:高层模块不应依赖于底层模块，它们都应该依赖抽象，抽象不应依赖于细节，细节应该依赖于抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">UserController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserController</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"><span class="comment">//CRUD</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserMapper</span>();</span><br><span class="line"><span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line"><span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"><span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当业务需求改变时，UserController就需要重写。各个模块之间实际上具有强关联，一个模块是直接指定依赖于另一个模块，当底层模块变动时，会直接影响到其他依赖于它的高层模块</p><p>引入Spring框架后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">UserController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Controller</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"><span class="comment">//接口中只做CRUD方法定义</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="comment">//实现类完成CRUD具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"><span class="comment">//业务代码定义</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="comment">//现在由Spring来为我们选择一个指定的实现类，然后注入</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">UserMapper mapper;</span><br><span class="line"><span class="comment">//业务代码具体实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">UserService userService;</span><br><span class="line">        <span class="comment">//业务代码定义</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过使用接口，就可以将原有的强关联给弱化，只需要接口中定义了什么方法然后取使用即可，具体的操作由接口的实现类来完成</p><p>5.接口隔离原则：是对接口的细化，客户端不应依赖那些它不需要的接口</p><p>在定义接口的时候，要注意控制接口的粒度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//电子设备</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Device</span>&#123;</span><br><span class="line">String <span class="title function_">getCpu</span><span class="params">()</span>;</span><br><span class="line">String <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line">String <span class="title function_">getMemory</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电脑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> <span class="keyword">implements</span> <span class="title class_">Device</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i9-12900k&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电脑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1T&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电风扇</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fan</span> <span class="keyword">implements</span> <span class="title class_">Device</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电风扇&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Device的接口粒度不够细，需要进行更细粒度的划分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//智能电子设备</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SmartDevice</span>&#123;</span><br><span class="line">String <span class="title function_">getCpu</span><span class="params">()</span>;</span><br><span class="line">String <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line">String <span class="title function_">getMemory</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//普通电子设备</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NormalDevice</span>&#123;</span><br><span class="line">String <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电脑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> <span class="keyword">implements</span> <span class="title class_">SmartDevice</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i9-12900k&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电脑&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1T&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电风扇</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fan</span> <span class="keyword">implements</span> <span class="title class_">NormalDevice</span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电风扇&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.合成复用原则：优先使用对象组合，而不是通过继承来达到复用的目的（核心就是委派）</p><p>在一个新的对象里使用一些已有的对象，使之成为新对象的一部分，新的对象通过这些对象的委派达到复用已有功能的目的。实际上在考虑将某个类通过继承关系在子类得到父类已经实现的方法之外，应该优先地去考虑使用合成地方法来实现复用</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDatabase</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;连接数据库&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;可通过继承也能连接数据库&quot;</span>);</span><br><span class="line">connectDatabase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B通过继承来得到A已经实现的连接数据库的操作，存在的问题就是耦合度太高了，当A的方法进行修改时，B就要进行修改。并且通过继承子类会得到一些父类中的实现细节，比如某些字段或是方法，直接暴露给子类，不安全</p><p>需要实现复用时，可以优先考虑以下操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDatabase</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;连接数据库&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(A a)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;连接数据库&quot;</span>);</span><br><span class="line">a.connectDatabase();<span class="comment">//传入对象A来执行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDatabase</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;连接数据库&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">A a;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;可通过继承也能连接数据库&quot;</span>);</span><br><span class="line">a.connectDatabase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对象之间的组合，降低了类之间的耦合度，并且A的实现细节也不会直接得到</p><p>7.迪米特法则：又称为最少知识原则，是对程序内部数据交互的限制</p><p>​每一个软件单位对其他单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</p><p>即一个类&#x2F;模块对其他的类&#x2F;模块有越少的交互越好。当一个类发生改动，那么与其相关的类（比如用到此类啥方法的类），需要尽可能少的受影响（比如修改了方法名，字段名等，其他用到这些方法或是字段的类也需要跟着修改），这样方便维护项目，即降低耦合度</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);<span class="comment">//进行网络通信</span></span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">test.test(socket);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="comment">//test方法需要得到我们当前Socket连接的服务器地址</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址&quot;</span> + socket.getLocalAddress());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test方法只需要一个IP地址即可，完全可以直接传入一个字符串，而不是整个Socket方法，需要保证与其他类的交互尽可能地少</p><p>比如当Socket类中地某些方法发生改变时，就要连带着去修改这些类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);<span class="comment">//进行网络通信</span></span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">test.test(socket.getLocalAddress().getHostAddress());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="comment">//test方法需要得到我们当前Socket连接的服务器地a址</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String address)</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址&quot;</span> + address;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><h3 id="工厂方法模式：最简单地一种设计模式，工厂方法模式代替了传统地直接new的形式"><a href="#工厂方法模式：最简单地一种设计模式，工厂方法模式代替了传统地直接new的形式" class="headerlink" title="工厂方法模式：最简单地一种设计模式，工厂方法模式代替了传统地直接new的形式"></a>工厂方法模式：最简单地一种设计模式，工厂方法模式代替了传统地直接new的形式</h3><p>使用<strong>简单工厂模式</strong>创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Fruit</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Fruit</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印以下当前水果名称，还有对象的hashCode</span></span><br><span class="line"><span class="meta">@override</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name + <span class="string">&quot;@&quot;</span> + hashCode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="string">&quot;水果&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Orange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常情况下，我们直接new就可以得到对象了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">System.out.println(apple);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将对象创建封装到工厂中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这里就直接来一个静态方法根据指定类型进行创建</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> type 水果类型</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 对应的水果对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title function_">getFruit</span><span class="params">(String type)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;苹果&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;橘子&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Orange</span>();</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//直接和工厂要而不是自己创建</span></span><br><span class="line"><span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> FruitFactory.getFruit(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">System.out.println(fruit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当我们修改apple的时候就不需要再每个类中改了</p><p>这样还是有一些问题，当需要新增一种水果的时候，就需要去修改工厂提供的工厂方法了，违反了开闭原则（类、模块和函数应该对外拓展开放，对修改关闭），因为工厂实际上是针对于调用方提供的，应该尽可能对修改关闭。</p><p>利用对扩展开放、对修改关闭的性质，将<strong>简单工厂模式</strong>改为<strong>工厂方法模式</strong>，探究如何使用拓展的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将水果工厂抽象为抽象类，添加泛型T由子类指定水果类型</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title function_">getFruit</span><span class="params">()</span>; <span class="comment">//不同的水果工厂，通过此方法产生不同的水果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果工厂直接返回Apple</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactory</span> <span class="keyword">extends</span> <span class="title class_">FruitFactory</span>&lt;Apple&gt;&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> Apple <span class="title function_">getFruit</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用不同类型的工厂来生成不同类型的水果，并且如果新增了水果类型，直接创建一个新的工厂类就行，不需要修改之前已经编好的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">test(<span class="keyword">new</span> <span class="title class_">AppleFactory</span>()::getFruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Supplier&lt;Fruit&gt; supplier)</span>&#123;</span><br><span class="line">System.out.println(supplier.get() + <span class="string">&quot;被吃掉了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象工厂模式</strong></p><p>简单工厂模式只适用于简单对象，当需要生产多个产品族时候就不太合适</p><p>将多个产品都放在一个工厂中进行生成，按不同的产品族进行划分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Router&#123;</span><br><span class="line">&#125;</span><br><span class="line">public class Table&#123;</span><br><span class="line">&#125;</span><br><span class="line">public class Phone&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public abstract class AbstractFactory&#123;</span><br><span class="line">public abstract Phone getPhone();</span><br><span class="line">public abstract Table getTable();</span><br><span class="line">public abstract Router getRouter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个工厂就可以生产同一个品牌族的所有产品</p><p>缺点就是品牌出了新的产品就需要去修改产品族的工厂，违反了开闭原则</p><p><strong>建造者模式</strong></p><p>框架提供的形如XXXBuilder的类型，一般使用这些类来创建我们需要的对象</p><p>例如StringBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//创建一个StringBuilder来逐步构建一个字符串</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">//拼接数字</span></span><br><span class="line">builder.append(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//拼接字符串</span></span><br><span class="line">builder.append(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line"><span class="comment">//在第三个位置插入一个字符串</span></span><br><span class="line">builder.insert(<span class="number">2</span>, <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">System.out.println(builder.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是通过建造者来不断配置参数或是内容，在进行对象的构建</p><p>相比直接去new一个对象，建造者模式的重心更加关注在如何完成每一步的配置，并且如果类的构造方法参数过多，使用建造者模式来创建这个对象，会使得代码更加优雅</p><p>举例：</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String name;</span><br><span class="line">String college;</span><br><span class="line">String profession;</span><br><span class="line">List&lt;String&gt; awards;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, <span class="type">int</span> grade, String name, String college, String profession, List&lt;String&gt; awards)</span>   &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个学生类的属性是非常多的，构造方法很长，如果直接new的方式去创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;JN&quot;</span>, <span class="string">&quot;IoT&quot;</span>, Arrays.asList(<span class="string">&quot;ACM&quot;</span>, <span class="string">&quot;WWE&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式很麻烦，使用建模者模式进行对象的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String name;</span><br><span class="line">String college;</span><br><span class="line">String profession;</span><br><span class="line">List&lt;String&gt; awards;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一律使用建造者来创建，不对外直接开放</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, <span class="type">int</span> grade, String name, String college, String profession, List&lt;String&gt; awards)</span>   &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StudentBuilder <span class="title function_">builder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一个内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StudentBuilder</span>&#123;</span><br><span class="line">        <span class="comment">//Builder也需要将所有的参数进行暂时保存</span></span><br><span class="line">        <span class="type">int</span> id;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        String name;</span><br><span class="line">        String college;</span><br><span class="line">        String profession;</span><br><span class="line">        List&lt;String&gt; awards;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接调用建造者对应的方法，为对应的属性赋值</span></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">id</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="comment">//为了支持链式调用，这里直接返回建造者本身</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">age</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="comment">//为了支持链式调用，这里直接返回建造者本身</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">awards</span><span class="params">(<span class="type">int</span> awards)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.awards = awards;</span><br><span class="line">            <span class="comment">//为了支持链式调用，这里直接返回建造者本身</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Student <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, age, grade, name, college, profession, awards);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用建造者来生成对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//获取建造者</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Student.builder()</span><br><span class="line">.id(<span class="number">1</span>)</span><br><span class="line">.age(<span class="number">18</span>)</span><br><span class="line">.grade(<span class="number">3</span>)</span><br><span class="line">.name(<span class="string">&quot;WW&quot;</span>)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单例模式</strong></p><p>只有一个实例对象，在整个程序中，同一个类始终只会有一个对象进行操作，比如数据库连接类，实际上只需要创建一个对象直接使用静态方法进行，没必要创建多个对象</p><p>简单单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="comment">//用于引用全局唯一的单例对象，在一开始就创建好</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//不允许随便new，需要对象直接找getInstance</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取全局唯一的单例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时需要获取此对象时，只能通过getInstance()来获取唯一的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Singleton singleton = Singleton.getInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这种写法之外，还有其他写法，这种写法称为懒汉式单例，也就一开始类加载时就创建好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">//在一开始先不进行对象创建</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将对象的创建延后到需要时再进行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果实例为空，进行创建，不为空就已经创建过了，那么直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式是不会提前准备单例对象的（延迟加载，懒加载），当需要对象时才会进行检查创建</p><p>懒汉式是在方法中进行的初始化，在多线程环境下，可能会出现问题，当多个现成同时调用getInstance()时候，可能对象会创建多次</p><p>为了避免线程安全问题，需要进行一些修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//synchronized关键字加锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果实例为空，进行创建，不为空就已经创建过了，那么直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>多个线程要调用，那么直接加一把锁，同一时间只能有一个线程进入，当在高并发的情况下，效率较低</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果实例为空，进行创建，不为空就已经创建过了，那么直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再加一层内层进行判断，因为可能有多个线程同时判断null而进入等锁的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果实例为空，进行创建，不为空就已经创建过了，那么直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            <span class="comment">//内层在进行一检查，双重检查锁定</span></span><br><span class="line">            <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了保证INSTANCE在线程之间的可见性，这样当其他线程进入之后才会拿到INSTANCE由其他线程更新的最新值去判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">//在一开始先不进行对象创建</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果实例为空，进行创建，不为空就已经创建过了，那么直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            <span class="comment">//内层在进行一检查，双重检查锁定</span></span><br><span class="line">            <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用静态内部类，不用加锁也能实现延迟加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span>&#123;</span><br><span class="line"><span class="comment">//由静态内部类持有单例对象，但是根据类加载特性，我们仅使用Singleton类时，不会对静态内部类进行初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有真正使用内部类时，才会进行类初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//直接获取内部类中的</span></span><br><span class="line"><span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原型模式</strong></p><p>原型模式使用原型实例指定带创建对象的类型，并且通过复制这个原型来创建新的对象。即原型对象作为模板，通过克隆操作，来产生更多的对象</p><p>浅拷贝：对于类中的基本数据类型，会直接复制给拷贝对象；对于引用类型，只会复制对象的地址，而实际上指向还是原来的那个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//基本类型浅拷贝</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">System.out.print(a == b);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">//引用类型浅拷贝，拷贝的仅仅是对上面对象的引用</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">k</span> <span class="operator">=</span> o;</span><br><span class="line">System.out.print(k == o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝：无论是基本类型还是引用类型，深拷贝会将引用类型的所有内容，全部拷贝为一个新的对象，包括对象内的所有成员变量，也会进行拷贝（在java中使用Cloneable接口提供的拷贝机制，来实现原型模式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException&#123;</span><br><span class="line"><span class="comment">//提升clone方法的访问权限</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  CloneNotSupportedException&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> (Student) student0.clone();</span><br><span class="line">    System.out.println(student0);</span><br><span class="line">    System.out.println(student1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，clone()方法克隆的对象并不是原来的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException&#123;</span><br><span class="line"><span class="comment">//提升clone方法的访问权限</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> (Student) student0.clone();</span><br><span class="line">System.out.println(student0.getName() == student1.getName());<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clone方法还是只会进行浅拷贝，实现深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException&#123;</span><br><span class="line"><span class="comment">//针对成员变量也进行拷贝</span></span><br><span class="line"><span class="comment">//提升clone方法的访问权限</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)<span class="built_in">super</span>.clone();</span><br><span class="line">student.name = <span class="keyword">new</span> <span class="title class_">String</span>(name);</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构性"><a href="#结构性" class="headerlink" title="结构性"></a>结构性</h2><p>结构性设计模式关注如何将现有的类或者对象组织在一起形成更加强大的结构</p><p><strong>类&#x2F;对象适配器模式</strong></p><p>例子：拓展坞（在接口和接口之间做一个适配）&#x2F;充电头（在220V交流电和手机之间做一个适配器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSupplier</span>&#123;</span><br><span class="line"><span class="comment">//手机供应商</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSupply</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;iphone 14&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">TestSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSupplier</span>();</span><br><span class="line">        test(?);<span class="comment">//我们没有Target类型的手机供应商，只有其他的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//现在调用test方法，但是test方法需要Target类型的手机供应商</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Target target)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功得到：&quot;</span> + target.supply());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在的手机供应商，不是test所需的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    String <span class="title function_">supply</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时使用适配器模式，适配器模式分为类适配器和对象适配器， </p><p>类适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAdapter</span> <span class="keyword">extends</span> <span class="title class_">TestSupplier</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line"><span class="comment">//让适配器继承TestSupplier并且实现Target接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">supply</span><span class="params">()</span>&#123; <span class="comment">//接着实现supply方法，直接使用TestSupplier提供的实现</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.doSupply();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就得到了一个Target类型的实现类，并且同时采用的是TestSupplier提供的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">TestAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestAdapter</span>();</span><br><span class="line">test(adapter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Target target)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;成功得到：&quot;</span> + target.supply());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：这种实现方式需要占用一个继承，如果此时Target不是接口而是抽象类的话，由于Java不支持多继承，就无法实现，同时根据合成复用原则，应该更多的通过合成的方式去实现功能</p><p>对象适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现在不再继承TestSupplier，仅实现Target</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAdapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">TestSupplier supplier;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TestAdapter</span><span class="params">(TestSupplier supplier)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.uspplier = supplier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">supply</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> supplier.doSupply();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们就将对象以组合的形式存放在TestAdapter中，依然是通过存放的对象调用具体实现</p><p><strong>桥接模式</strong></p><p>例子：点奶茶，加小料</p><p>按照接口实现的写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Tea</span>&#123;</span><br><span class="line">String <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Size</span>&#123;</span><br><span class="line">String <span class="title function_">getSize</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的类型</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*大杯芋圆啵啵奶茶</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> clas LargeKissTea <span class="keyword">implements</span> <span class="title class_">Tea</span>, Size&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;大杯&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;芋圆啵啵奶茶&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当随着奶茶的品种多起来之后，并且每个奶茶都有大小中杯，现在一共有两个维度需要考虑，那么就需要一个一个去创建这些类？并且如果还要考虑配料…….这种设计显然不太合理</p><p>此时可以使用桥接模式，单独对接口进行简单的扩展，单独对不同的维度进行控制，可将奶茶的类型作为最基本的抽象类，然后对尺寸、配料等属性进行桥接</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 大话设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户中心项目分享</title>
      <link href="/wang666-bot.github.io/post/ac2907d5.html"/>
      <url>/wang666-bot.github.io/post/ac2907d5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用户中心（上）"><a href="#用户中心（上）" class="headerlink" title="用户中心（上）"></a>用户中心（上）</h1><p>需求分析 &#x3D;》设计（概要设计、详细设计）&#x3D;》技术选型&#x3D;》初始化&#x2F;引入需要的技术&#x3D;&gt;写Demo&#x3D;》写代码（实现业务逻辑）&#x3D;》测试（单元测试）&#x3D;》代码提交 &#x2F; 代码评审 &#x3D;》部署 &#x3D;》发布</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>1.登陆&#x2F;注册</p><p>2.用户管理（管理员可见）对用户的查询或者修改</p><p>3.用户校验</p><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p>前端：三件套 + React + 组件库Ant Design + Umi + Ant Design Pro（现成的管理系统）</p><p>后端： Java + SSM+mysql </p><p>部署： 服务器&#x2F;容器（平台）</p><p>1.1初始化项目</p><p>​前端初始化</p><p>​初始化项目</p><p>​引入组件</p><p>​框架介绍&#x2F;项目瘦身</p><p>​后端初始化</p><p>​准备环境（MySQL）</p><p>​引入框架</p><p>1.2登录&#x2F;注册</p><p>​前端</p><p>​后端</p><p>1.4用户管理</p><p>​前端</p><p>​后端</p><p>yarn包管理器，比npm下载更快（并行下载）</p><p>初始化Java项目的方式</p><p>1.Github搜现成的代码</p><p>2.SprintBoot官方的模板生成器 <a href="https://start.spring.io/">https://start.spring.io/</a></p><p>3.直接在IDEA开发工具生成（推荐）</p><h1 id="用户中心（中）"><a href="#用户中心（中）" class="headerlink" title="用户中心（中）"></a>用户中心（中）</h1><p>数据库的设计：根据需求场景判断有哪些表（模型）？表里有哪些字段 ？字段的类型？给数据库字段添加索引？</p><p>表与表之间的关联</p><p>用户表：</p><p>id（主键）  bigint</p><p>username 昵称  varchar</p><p>登陆账号 account</p><p>avatarUrl 头像 varchar</p><p>gender 性别 tinyint</p><p>password 密码 varchar</p><p>phone电话 varchar</p><p>email 邮箱 varchar</p><p>isVaild是否有效 tinyint 0&#x2F;1</p><p>createTime 创建时间（数据插入时间）datetime</p><p>updateTime 更新时间（数据更新时间） datetime</p><p>isDelete 是否删除 （逻辑删除）tinyint</p><p>userRole  用户角色 0 普通用户 1 管理员</p><p>建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table user</span><br><span class="line">(</span><br><span class="line">    id           bigint auto_increment comment &#x27;id</span><br><span class="line">&#x27;</span><br><span class="line">        primary key,</span><br><span class="line">    username     varchar(256)                        null comment &#x27;用户名称&#x27;,</span><br><span class="line">    userAccount  varchar(256)                        null comment &#x27;登录账号&#x27;,</span><br><span class="line">    avatarUrl    varchar(1024)                       null comment &#x27;用户头像&#x27;,</span><br><span class="line">    gender       tinyint                             null comment &#x27;性别&#x27;,</span><br><span class="line">    phone        varchar(128)                        null comment &#x27;电话&#x27;,</span><br><span class="line">    userpassword varchar(512)                        not null comment &#x27;密码&#x27;,</span><br><span class="line">    email           varchar(512)                        null comment &#x27;邮箱&#x27;,</span><br><span class="line">    userstatus   int       default 0                 null comment &#x27;状态&#x27;,</span><br><span class="line">    createTime   datetime  default CURRENT_TIMESTAMP not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    updateTime   timestamp default CURRENT_TIMESTAMP null comment &#x27;更新时间&#x27;,</span><br><span class="line">    isDelete     tinyint   default 0                 not null comment &#x27;是否删除&#x27;</span><br><span class="line">)</span><br><span class="line">    comment &#x27;用户&#x27;;</span><br></pre></td></tr></table></figure><p>实现登陆注册功能</p><p>​后端：</p><p>​1.规整项目目录</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/ac2907d5.htm/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB/image-20230510225949131.png" alt="01"></p><p>​controller：控制层，专门用于接收请求</p><p>​mapper：数据访问层（从数据库中查询数据）</p><p>​model：定义和数据库相对应的模型、封装类等</p><p>​service：编写业务逻辑（登陆注册等）</p><p>​utils：存放工具类（加密，格式转化等）</p><p>​2.实现基本数据库操作（操作user表）</p><p>​目的：模型user对象  &#x3D;》 和数据库的字段关联，自动生成（MybatisX插件）</p><p>​MybatisX插件：自动根据数据库生成domain实体对象、mapper（操作数据库的对象）、mapper.xml（定义了mapper对象和数据库的关联，可以在里面自己写SQL）、service（包含常用的增删改查）、service实现类</p><p>​实现注册逻辑：</p><p>​1.用户在前端输入账户和密码、以及校验码</p><p>​2.校验用户的账户、密码、校验密码是否符合规则</p><p>​账户不小于4位</p><p>​密码不小于8位</p><p>​账户不能重复</p><p>​密码和校验密码相同</p><p>​3.对密码进行加密（密码千万不能直接以明文存储到数据库中）</p><p>​4.向数据库插入用户数据</p><h1 id="用户中心（下）"><a href="#用户中心（下）" class="headerlink" title="用户中心（下）"></a>用户中心（下）</h1><p>1.开发完成后端登录功能</p><p>2.开发后端用户的管理接口</p><p>3.开发前端用户登录注册功能</p><p>4.讨论如何校验用户（限制使用人）</p><h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><p>接收参数：用户账户、密码</p><p>请求类型：POST</p><p>请求体： JSON格式的数据</p><p>​请求参数很长时不建议用get</p><p>返回值：用户信息（脱敏）</p><p>逻辑：</p><p>​1.校验用户账户和密码是否合法</p><p>​非空</p><p>​账户不小于4位</p><p>​密码不小于8位</p><p>​密码和校验密码相同</p><p>2.校验密码是否输入正确，要和数据库中的密文密码取对比</p><p>3.用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄漏</p><p>4.我们要记录用户的登陆状态（session），将其存到服务器上（用后端SpringBoot框架封装的服务器tomcat去记录）</p><p>5.返回安全的脱敏后的用户信息</p><p>控制层Controller封装请求</p><p>application.yml 指定接口全局api</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">servlet:</span><br><span class="line">  context-path: /api</span><br></pre></td></tr></table></figure><p>@RestController适用于编写restful风格的api，返回值默认为json类型</p><p>controller层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）</p><p>service层是对业务逻辑的校验（有可能贝controller之外的业务逻辑调用）</p><p>如何直到是哪个用户登陆了</p><p>​1.连接服务器端后，得到一个session状态（匿名会话），返回给前端</p><p>​2.登陆成功后，得到了登陆成功的session，并且给session设置一些值（比如用户信息）返回给前端一个设置cookie 的”命令“</p><p>​3.前端接收到后端的命令后，设置cookie，保存到浏览器内</p><p>​4.前端再次请求后端的时候（相同的域名），在请求头中带上cookie去请求</p><p>​5.后端拿到前端传来的cookie，找到对应的session</p><p>​6.后端从session中取出基于该session存储的变量（用户的登录信息、登录名）</p><h2 id="用户管理接口"><a href="#用户管理接口" class="headerlink" title="用户管理接口"></a>用户管理接口</h2><p>！！！必须鉴权</p><p>1.查询用户</p><p>​根据用户名查询</p><p>2.删除用户</p><p>先做设计</p><p>代码实现</p><p>持续优化！！！（复用代码、提取公共逻辑&#x2F;常量）</p><h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><p>前端需要向后端发送请求</p><p>前端ajax来请求后端</p><p>axios封装ajax</p><p>request是ant design项目又封装了axios</p><p>追踪request源码：用到了umi的插件，requestConfig是一个插件</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>正向代理：替客户端向服务端发送请求，</p><p>反向代理：替服务器接收请求</p><p><img src="/wang666-bot.github.io/wang666-bot.github.io/post/ac2907d5.htm/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB/image-20230514212035624.png" alt="image-20230514212035624"></p><p>怎么搞代理</p><p>Nginx服务器</p><p>Node.js服务器</p><p>原本请求：<a href="http://localhost:8000/api/user/login">http://localhost:8000/api/user/login</a></p><h1 id="用户中心（终）"><a href="#用户中心（终）" class="headerlink" title="用户中心（终）"></a>用户中心（终）</h1><p>1.完成注册功能的前端开发</p><p>2.获取用户的登录态，获取当前登录用户信息接口</p><p>3.完成用户管理后台的前端开发</p><p>4.前端代码瘦身&amp;优化</p><p>5.后端代码优化</p><p>6.新需求-用户校验</p><p>7.项目扩展思路</p><p>Ant Design Pro（Umi框架）</p><p>app.tsx项目全局入口文件，定义了整个项目中使用的公共数据（比如用户信息）</p><p>access.ts控制用户的访问权限</p><p>首次访问页面（刷新页面），进入app.tsx，执行getInitialState方法，该方法的返回值就是全局可用的状态值</p><p>ProComponents高级表单</p><p>1.通过columns定义表格有哪些列</p><p>2.columns里的属性</p><p>​dataIndex对应返回数据对象的属性</p><p>​title表格列名</p><p>​copyable ： 是否允许复制</p><p>​ellipsis ： 是否允许缩略</p><p>​valueType：用于声明这一列的类型</p><p>MFSU：前端编译优化（联邦模块编译）</p><p>Ant Design 组件库 &#x3D;&gt; React</p><p>Ant Design Pro  components &#x3D;&gt; Ant Design 业务组件</p><p>Ant Design Pro 后台管理系统 &#x3D;&gt; Ant Design 、React 、Ant Design Pro  components、其他的库</p><p>用户中心（末）</p><p>1.开发用户注销  前端&#x2F;后端</p><p>2.补充用户注册校验逻辑 前端&#x2F;后端</p><p>3.后端代码优化</p><p>4.前端代码优化</p><p>5.项目部署上线</p><p>​1.原生部署</p><p>​2.容器部署</p><p>​3.绑定域名</p><p>用户校验</p><p>​仅适用于用户可信的情况</p><p>让用户自己填：2-5位编号</p><p>后台补充对编号的校验：长度校验、唯一性校验</p><p>前端补充输入框，适配后端</p><p>后期拉去星球数据，定期清理违规用户</p><h2 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h2><p>1.通用返回对象，给对象补充一些信息</p><p>​目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功还是失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;name&quot;:&quot;wang&quot;</span><br><span class="line">&#125;</span><br><span class="line">//成功</span><br><span class="line">&#123;</span><br><span class="line">&quot;code&quot;: 0 //业务状态码</span><br><span class="line">&quot;data&quot;:&#123;</span><br><span class="line">&quot;name&quot;:&quot;wang&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;message&quot;:&quot;ok&quot;</span><br><span class="line">&#125;</span><br><span class="line">//错误</span><br><span class="line">&#123;</span><br><span class="line">&quot;code&quot;: 50001 //业务状态码</span><br><span class="line">&quot;data&quot;:null</span><br><span class="line">&quot;message&quot;:&quot;用户操作异常&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​自定义错误码</p><p>​返回类支持返回正常和错误</p><p>2.封装全局异常处理</p><p>​1.定义业务异常类</p><p>​1.相对于java的异常类，支持更多字段</p><p>​2.自定义构造函数，更灵活 &#x2F; 快捷的设置字段</p><p>​2.编写全局异常处理器</p><p>​作用：</p><p>​1.捕获代码中所有的异常，内部消化，集中处理，让前端得到更详细的业务报错&#x2F;信息</p><p>​2.同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</p><p>​3.集中处理，比如记录日志</p><p>​实现：</p><p>​1.Spring AOP：在调用方法前后进行额外的处理</p><p>3.全局请求日志和登录校验</p><p>​</p><p>​前端优化</p><p>​1.对接后端的返回值，取data</p><p>​2.全局响应处理 <a href="https://blog.csdn.net/huantai3334/article/details/116780020">https://blog.csdn.net/huantai3334/article/details/116780020</a></p><p>​1.应用场景：我们需要对接口的通用响应进行统一处理，比如从response中取出data， 或者根据code去集中处理错误，比如用户未登录、没权限之类的</p><p>​2.优势：不用在每个接口请求中都去写相同的逻辑</p><p>​3.实现：参考使用的请求封装工具的官方文档，比如umi-request</p><p>​如果使用axios，参考axios的文档，创建新的文件，在该文件中配置一个全局请求类，在发送请求时，使用我们自己的定义的全局请求类</p><h1 id="用户中心（部署）"><a href="#用户中心（部署）" class="headerlink" title="用户中心（部署）"></a>用户中心（部署）</h1><p>1.多环境</p><p>2.项目部署上线</p><p>​原始前端&#x2F;后端项目</p><p>​宝塔Linux</p><p>​容器</p><p>​容器平台</p><p>3.前后端的联调</p><p>4.用户中心项目扩展和规划</p><h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><p>参考文章<a href="https://blog.csdn.net/weixin_41701290/article/details/120173283">https://blog.csdn.net/weixin_41701290/article/details/120173283</a></p><p>本地开发localhost（127.0.0.1）</p><p>多环境：指同一套项目代码在不同的阶段需要根据实际情况来部署到不同的机器上，并且要调整配置</p><p>为什么需要？</p><p>​1.每个环境互不影响</p><p>​2.为了区分不同的阶段：开发&#x2F;测试&#x2F;生产</p><p>​3.对项目进行优化：</p><p>​1.本地日志级别</p><p>​2.精简依赖，减少项目体积</p><p>​3.项目的环境&#x2F;参数可以调整，比如JVM参数</p><p>针对不同环境做不同的事情</p><p>多环境分类：</p><p>​1.本地环境（自己的电脑）localhost</p><p>​2.开发环境（远程开发）大家连同一台机器，为了大家开发方便</p><p>​3.测试环境（测试）开发&#x2F;测试&#x2F;产品，单元测试 &#x2F; 性能测试 &#x2F; 功能测试 &#x2F;系统集成测试，独立的数据库，独立的服务器</p><p>​4.预发布环境（体验服）：和正式环境一致，正式数据库，可以更严谨，查出更多问题</p><p>​5.正式环境（线上，公开对外访问的项目）：尽量不要改动，保证上线前的代码是完美运行</p><p>​6.沙箱环境（实验环境）：为了做实验</p><p>​</p><h2 id="前端多环境实战"><a href="#前端多环境实战" class="headerlink" title="前端多环境实战"></a>前端多环境实战</h2><p>请求地址</p><p>​开发环境：localhost:8000</p><p>​线上环境：备案的域名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">startFront</span>(<span class="params">env</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(env === <span class="string">&#x27;prod&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//不输出注释</span></span><br><span class="line">        <span class="comment">//项目优化</span></span><br><span class="line">        <span class="comment">//修改请求地址</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//保持本地开发逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了umi框架，build时会自动传入NODE_ENV &#x3D;&#x3D; production参数， start NODE_ENV参数为 development</p><p>启动方式</p><p>​开发环境：npm run start（本地启动，监听端口，自动更新）</p><p>​线上环境：npm  run build（项目构建打包），可以使用serve工具启动（npm i -g serve）</p><p>项目的配置</p><p>不同的项目框架都有不同的配置文件，umi的配置文件是config</p><p>​可以在配置文化后添加对应的环境名称后缀来区分开发环境和生产环境，参考文档umi的部署</p><p>​开发环境：config.dev.ts</p><p>​生产环境：config.prod.ts</p><p>​公共配置：config.ts不带后缀</p><h2 id="后端多环境实战"><a href="#后端多环境实战" class="headerlink" title="后端多环境实战"></a>后端多环境实战</h2><p>​SpringBoot项目，通过application.yml添加不同的后缀来区分配置文件，可以在启动项目时传入环境变量：</p><p>主要是改依赖的环境地址：</p><p>​数据库地址</p><p>​缓存地址</p><p>​消息队列地址</p><p>​项目端口号</p><p>服务器配置</p><p>项目部署</p><p>需要Linux服务器（建议CnetOS8 +&#x2F;7.6以上）</p><p>原始部署</p><p>什么都自己装</p><p>前端</p><p>需要web服务器：nginx，apache、tomcat</p><p>安装nginx服务器</p><p>​1.用系统自带的软件包管理器快速安装 比如centos的yum</p><p>​2.自己到官网（参考文章<a href="https://zhuanlan.zhihu.com/p/425790769%EF%BC%89">https://zhuanlan.zhihu.com/p/425790769）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> curl -o nginx-1.24.0 http://nginx.org/download/nginx-1.24.0.tar.gz</span><br><span class="line"> tar -zxvf nginx-1.24.0</span><br><span class="line"> cd nginx-1.24.0</span><br><span class="line">  ./configure</span><br><span class="line">yum install openssl openssl-devel -y</span><br><span class="line"> ./configure --with-http_ssl_module --with-http_v2_module --with-stream</span><br><span class="line"> make</span><br><span class="line">  make install</span><br><span class="line"> ls</span><br><span class="line">  ls /usr/local/nginx/sbin/nginx</span><br><span class="line"> vim /etc/profile</span><br><span class="line">在最后一行添加export PATH=$PATH:/usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><p>注意权限</p><p>部署后端</p><p>java、maven</p><p>宝塔Linux部署</p><p>linux运维面板</p><p>Docker部署</p><p>docker是容器，可以将项目的环境（比如java，nginx）和项目的代码仪器打包成镜像，所有同学都能下载镜像，更容易分发和移植</p><p>再启动项目时，不需要敲一大堆命令，而是直接下载镜像、启动镜像就可以了</p><p>docker可以理解为软件安装包</p><p>dockfile</p><p>FROM依赖的基础镜像</p><p>WORKDIR工作目录</p><p>COPY从本机复制文件</p><p>RUN执行命令</p><p>CMD&#x2F;ENTRYPOINT（附加额外参数）指定运行容器时默认执行的命令</p><p>根据Dockerfile构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t </span><br></pre></td></tr></table></figure><p>Docker构建优化：减少尺寸、减少构建时间（比如多阶段构建，可以丢弃之前阶段不需要的内容）</p><p>docker run启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80：80 -v /data：/data -d nginx：latest</span><br></pre></td></tr></table></figure><p>虚拟化：</p><p>​1.端口映射：把本机的资源和容器内部的资源进行关联</p><p>​2.目录映射：把本机的端口和容器应用的端口进行关联</p><p>前端部署方式</p><p>前端webfiy web应用托管（比容器化更傻瓜式，不需要自己写构建应用的命令，就能启动前端项目）</p><p>小缺点：需要将代码放到代码托管平台上</p><p>优势：不用写命令、代码更新时自动构建</p><p>Docker平台部署</p><p>1.云服务商的容器平台（腾讯云、阿里云）</p><p>2.面向某个领域的容器平台（前端webify、后端微信云托管）</p><p>容器平台的好处：</p><p>​1.不用输命令来操作，更方便省事</p><p>​2.不用在控制台操作，更傻瓜式、更简单</p><p>​3.大厂运维，比自己运维更省心</p><p>​4.额外的能力，比如监控、告警、其他（存储、负载均衡、自动扩缩容、流水线）</p><h1 id="用户中心（上线）"><a href="#用户中心（上线）" class="headerlink" title="用户中心（上线）"></a>用户中心（上线）</h1><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>前端项目访问：用户输入网址&#x3D;&gt; 域名解析服务器（把网址解析为ip地址&#x2F;交给其他的域名解析服务器）&#x3D;&gt; 服务器&#x3D;&gt;（ 防火墙）&#x3D;&gt; nginx接收请求，找到对应的文件，返回文件给前端&#x3D;&gt; 前端加载文件到浏览器中(js\css) &#x3D;&gt; 渲染页面</p><p>后端项目访问：用户输入网址 &#x3D;&gt; 域名解析服务器 &#x3D;&gt; 服务器 &#x3D;&gt;nginx接受请求&#x3D;&gt;  后端项目(比如8080端口)</p><p>nginx反向代理：替服务器接收请求，转发请求</p><p>跨域问题解决</p><p>浏览器为了用户的安全，仅允许向<strong>同域名、同端口</strong>的服务器发送请求</p><p>如何解决跨域</p><p>​1.把端口、域名改成相同的</p><p>让服务器告诉浏览器：允许跨域（返回cross-origin-allow响应头）</p><p>​2.网关支持（Nginx网关）</p><p>​3.修改后端服务</p><p>​1.配置@CrossOrigin注解</p><p>​2.添加web全局请求拦截器</p><p>​3.定义新的corsFilter Bean</p><p>项目优化点：</p><p>​1.功能扩充</p><p>​1.管理员创建用户】修改用户信息、删除用户</p><p>​2.上传头像</p><p>​3.按照更多的条件去查询用户</p><p>​4.更改权限</p><p>2.修改Bug</p><p>3.项目登录改为分布式session（单点登录）</p><p>4.通用性</p><p>​1.set-cookie domain域名更通用，比如改为*.xxx.com</p><p>​2.把用户管理系统 &#x3D;&gt; 用户中心（之后所有的服务都请求这个后端）</p><p>4.后台添加全局请求拦截器（统一去判断用户权限、统一记录请求日志）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 用户管理系统 Java 前端 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+阿里云+github搭建博客</title>
      <link href="/wang666-bot.github.io/post/a6f5b56e.html"/>
      <url>/wang666-bot.github.io/post/a6f5b56e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/wang666-bot.github.io/post/4a17b156.html"/>
      <url>/wang666-bot.github.io/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\wang666-bot.github.io\assets\css\APlayer.min.css"><script src="\wang666-bot.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
